{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"“09_up_and_running_with_tensorflow.ipynb”的副本","version":"0.3.2","provenance":[{"file_id":"https://github.com/wrk1231/handson-ml/blob/master/09_up_and_running_with_tensorflow.ipynb","timestamp":1555637774859}],"collapsed_sections":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"cCDmdMVGPJUc","colab_type":"text"},"cell_type":"markdown","source":["**Chapter 9 – Up and running with TensorFlow**"]},{"metadata":{"id":"ueybhNApPMmm","colab_type":"code","outputId":"e172395e-53d9-4c4f-bc9c-b05a506b856d","executionInfo":{"status":"ok","timestamp":1556065831442,"user_tz":240,"elapsed":12053,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":104}},"cell_type":"code","source":["!git clone https://github.com/wrk1231/handson-ml\n","!mv handson-ml/* /content"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Cloning into 'handson-ml'...\n","remote: Enumerating objects: 1351, done.\u001b[K\n","remote: Total 1351 (delta 0), reused 0 (delta 0), pack-reused 1351\u001b[K\n","Receiving objects: 100% (1351/1351), 73.82 MiB | 27.50 MiB/s, done.\n","Resolving deltas: 100% (771/771), done.\n"],"name":"stdout"}]},{"metadata":{"id":"OMh64NO0PJUf","colab_type":"text"},"cell_type":"markdown","source":["_This notebook contains all the sample code and solutions to the exercises in chapter 9._"]},{"metadata":{"id":"l_wCzIGgPJUg","colab_type":"text"},"cell_type":"markdown","source":["# Setup"]},{"metadata":{"id":"rWE76FZjPJUh","colab_type":"text"},"cell_type":"markdown","source":["First, let's make sure this notebook works well in both python 2 and 3, import a few common modules, ensure MatplotLib plots figures inline and prepare a function to save the figures:"]},{"metadata":{"id":"Igky1BSYPJUh","colab_type":"code","colab":{}},"cell_type":"code","source":["# To support both python 2 and python 3\n","from __future__ import division, print_function, unicode_literals\n","\n","# Common imports\n","import numpy as np\n","import os\n","\n","# to make this notebook's output stable across runs\n","def reset_graph(seed=42):\n","    tf.reset_default_graph()\n","    tf.set_random_seed(seed)\n","    np.random.seed(seed)\n","\n","# To plot pretty figures\n","%matplotlib inline\n","import matplotlib\n","import matplotlib.pyplot as plt\n","plt.rcParams['axes.labelsize'] = 14\n","plt.rcParams['xtick.labelsize'] = 12\n","plt.rcParams['ytick.labelsize'] = 12\n","\n","# Where to save the figures\n","PROJECT_ROOT_DIR = \".\"\n","CHAPTER_ID = \"tensorflow\"\n","\n","def save_fig(fig_id, tight_layout=True):\n","    path = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID, fig_id + \".png\")\n","    print(\"Saving figure\", fig_id)\n","    if tight_layout:\n","        plt.tight_layout()\n","    plt.savefig(path, format='png', dpi=300)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"KJKOPZ0KvYfo","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":452},"outputId":"3488030f-9fd2-455b-e18d-6bbf1228e69b","executionInfo":{"status":"ok","timestamp":1556065878189,"user_tz":240,"elapsed":58740,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["!pip install tensorflow-gpu"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Collecting tensorflow-gpu\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/7b/b1/0ad4ae02e17ddd62109cd54c291e311c4b5fd09b4d0678d3d6ce4159b0f0/tensorflow_gpu-1.13.1-cp36-cp36m-manylinux1_x86_64.whl (345.2MB)\n","\u001b[K    100% |████████████████████████████████| 345.2MB 56kB/s \n","\u001b[?25hRequirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (0.7.1)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (1.1.0)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (0.33.1)\n","Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (1.16.2)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (1.0.9)\n","Requirement already satisfied: gast>=0.2.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (0.2.2)\n","Requirement already satisfied: tensorflow-estimator<1.14.0rc0,>=1.13.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (1.13.0)\n","Requirement already satisfied: absl-py>=0.1.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (0.7.1)\n","Requirement already satisfied: keras-applications>=1.0.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (1.0.7)\n","Requirement already satisfied: tensorboard<1.14.0,>=1.13.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (1.13.1)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (1.15.0)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (1.12.0)\n","Requirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.6/dist-packages (from tensorflow-gpu) (3.7.1)\n","Requirement already satisfied: mock>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow-estimator<1.14.0rc0,>=1.13.0->tensorflow-gpu) (2.0.0)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications>=1.0.6->tensorflow-gpu) (2.8.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.14.0,>=1.13.0->tensorflow-gpu) (3.1)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.14.0,>=1.13.0->tensorflow-gpu) (0.15.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.6.1->tensorflow-gpu) (40.9.0)\n","Requirement already satisfied: pbr>=0.11 in /usr/local/lib/python3.6/dist-packages (from mock>=2.0.0->tensorflow-estimator<1.14.0rc0,>=1.13.0->tensorflow-gpu) (5.1.3)\n","Installing collected packages: tensorflow-gpu\n","Successfully installed tensorflow-gpu-1.13.1\n"],"name":"stdout"}]},{"metadata":{"id":"xvx82cuLdyXc","colab_type":"code","colab":{}},"cell_type":"code","source":["from tensorflow import keras"],"execution_count":0,"outputs":[]},{"metadata":{"id":"43FIXQFsPJUn","colab_type":"text"},"cell_type":"markdown","source":["# Creating and running a graph"]},{"metadata":{"id":"EcIdGjaRPJUo","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":106},"outputId":"cc225d0f-d1fb-4840-b425-143710a296fc","executionInfo":{"status":"ok","timestamp":1556065879169,"user_tz":240,"elapsed":59654,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["import tensorflow as tf\n","\n","reset_graph()\n","\n","x = tf.Variable(3, name=\"x\")\n","y = tf.Variable(4, name=\"y\")\n","f = x*x*y + y + 2\n","\n","op = x.assign(7)\n","op"],"execution_count":5,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Colocations handled automatically by placer.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor 'Assign:0' shape=() dtype=int32_ref>"]},"metadata":{"tags":[]},"execution_count":5}]},{"metadata":{"id":"sJPGjp4cfPwr","colab_type":"code","outputId":"be6d87ee-3f62-46a2-da11-21ce51a947ce","executionInfo":{"status":"ok","timestamp":1556065879803,"user_tz":240,"elapsed":60232,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"cell_type":"code","source":["with tf.Session() as sess:\n","    sess.run(x.initializer)\n","#     x.initializer.run()\n","    sess.run(y.initializer)\n","    print(x.eval(),y.eval())\n","#     sess.run(op)\n","    print(x.eval())\n","    sess.run(f)\n","    print(f.eval())"],"execution_count":6,"outputs":[{"output_type":"stream","text":["3 4\n","3\n","42\n"],"name":"stdout"}]},{"metadata":{"id":"yrtnNq17PJUs","colab_type":"code","outputId":"611f4a2d-738a-4fb7-b073-c9061014e3b0","executionInfo":{"status":"ok","timestamp":1556065879807,"user_tz":240,"elapsed":60201,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["f"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor 'add_1:0' shape=() dtype=int32>"]},"metadata":{"tags":[]},"execution_count":7}]},{"metadata":{"id":"ayuTaid6hMPw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"ce5c5032-d9af-4fe8-ec3c-ebbbf290270a","executionInfo":{"status":"ok","timestamp":1556065879809,"user_tz":240,"elapsed":60152,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["op"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor 'Assign:0' shape=() dtype=int32_ref>"]},"metadata":{"tags":[]},"execution_count":8}]},{"metadata":{"id":"l1JH-zHAhNpT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"90e9de77-0cd2-4e96-929f-2e017aaff167","executionInfo":{"status":"ok","timestamp":1556065879813,"user_tz":240,"elapsed":60122,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["print(tf.get_default_session())"],"execution_count":9,"outputs":[{"output_type":"stream","text":["None\n"],"name":"stdout"}]},{"metadata":{"id":"FxVrTZIewFRO","colab_type":"code","outputId":"e8fb6cc1-241e-482b-ec9f-1f143753efc7","executionInfo":{"status":"ok","timestamp":1556065879821,"user_tz":240,"elapsed":60104,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["x.graph is tf.get_default_graph()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":10}]},{"metadata":{"id":"H7calOLnh_vE","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"244f4789-e295-47fc-d8fa-74f1820f2096","executionInfo":{"status":"ok","timestamp":1556065879822,"user_tz":240,"elapsed":60078,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["x.graph"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.framework.ops.Graph at 0x7f9cf88548d0>"]},"metadata":{"tags":[]},"execution_count":11}]},{"metadata":{"id":"cYyztnxRiUCO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"4e177a83-a61b-4fee-d35a-f34a073af4f5","executionInfo":{"status":"ok","timestamp":1556065879823,"user_tz":240,"elapsed":60052,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["\n","\n","\n","\n","\n","id(x)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["140312161110560"]},"metadata":{"tags":[]},"execution_count":12}]},{"metadata":{"id":"cEQBNc_NiUnU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"73d781b7-7106-453e-c0c0-c425ced46d00","executionInfo":{"status":"ok","timestamp":1556065879825,"user_tz":240,"elapsed":60023,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["id(x.graph)"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["140312161110224"]},"metadata":{"tags":[]},"execution_count":13}]},{"metadata":{"id":"HPh-xfl7iWA6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"cfbc0b75-f0d0-4c66-cb30-9aeb39cfe666","executionInfo":{"status":"ok","timestamp":1556065879826,"user_tz":240,"elapsed":59993,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["sess2 = tf.Session()\n","id(sess2)"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["140312161109552"]},"metadata":{"tags":[]},"execution_count":14}]},{"metadata":{"id":"qO0rUK1ticxN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"96e39ca4-f65f-4e8a-cf57-27d8d47a0eda","executionInfo":{"status":"ok","timestamp":1556065879828,"user_tz":240,"elapsed":59966,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["sess2"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.client.session.Session at 0x7f9cf8854630>"]},"metadata":{"tags":[]},"execution_count":15}]},{"metadata":{"id":"Ovrmwy1IPJUy","colab_type":"code","outputId":"f8409fb1-fc92-49b8-c654-fed15912459d","executionInfo":{"status":"ok","timestamp":1556065879829,"user_tz":240,"elapsed":59939,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["sess = tf.Session()\n","sess.run(x.initializer)\n","sess.run(y.initializer)\n","print(tf.get_default_session())\n","result = sess.run(f)\n","print(result)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["None\n","42\n"],"name":"stdout"}]},{"metadata":{"id":"lhIZzpcRjVLT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"c2d4529c-4d8c-4997-8089-81739c65b3f6","executionInfo":{"status":"ok","timestamp":1556065879831,"user_tz":240,"elapsed":59916,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["print(tf.get_default_session())"],"execution_count":17,"outputs":[{"output_type":"stream","text":["None\n"],"name":"stdout"}]},{"metadata":{"id":"mpOUZ_-twGZK","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"5PxxKgPejaSP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"e3c2e564-d07c-4942-b9c0-819fd77eda0d","executionInfo":{"status":"ok","timestamp":1556065879838,"user_tz":240,"elapsed":59893,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["print(sess2)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["<tensorflow.python.client.session.Session object at 0x7f9cf8854630>\n"],"name":"stdout"}]},{"metadata":{"id":"WebfUUbSPJU2","colab_type":"code","colab":{}},"cell_type":"code","source":["sess2.close()\n","sess.close()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"q6AoPAtmPJU8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":86},"outputId":"f907bc33-4bdf-45c0-e115-19f90aac6ea0","executionInfo":{"status":"ok","timestamp":1556065879841,"user_tz":240,"elapsed":59854,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["with tf.Session() as sess:\n","    print(sess)\n","    print(tf.get_default_session())\n","    x.initializer.run()\n","    y.initializer.run()\n","    result = f.eval()\n","    print(op.eval())\n","    print(x.eval())"],"execution_count":20,"outputs":[{"output_type":"stream","text":["<tensorflow.python.client.session.Session object at 0x7f9cf8007828>\n","<tensorflow.python.client.session.Session object at 0x7f9cf8007828>\n","7\n","7\n"],"name":"stdout"}]},{"metadata":{"id":"elHzfh9FjiVx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"1fd0abf6-0ead-4bea-e767-805efa50dbca","executionInfo":{"status":"ok","timestamp":1556065880860,"user_tz":240,"elapsed":60847,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["sess2"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.client.session.Session at 0x7f9cf8854630>"]},"metadata":{"tags":[]},"execution_count":21}]},{"metadata":{"id":"-ytunLJWjjXV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"62493674-aab5-48d5-c822-513956983408","executionInfo":{"status":"ok","timestamp":1556065880863,"user_tz":240,"elapsed":60823,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["sess"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.client.session.Session at 0x7f9cf8007828>"]},"metadata":{"tags":[]},"execution_count":22}]},{"metadata":{"id":"pk49HZf8qTJl","colab_type":"code","outputId":"d5f8f5e7-49a6-4016-c637-5456e92e2b23","executionInfo":{"status":"ok","timestamp":1556065880865,"user_tz":240,"elapsed":60799,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["with tf.Session() as sess:\n","    sess.run(x.initializer)\n","    sess.run(y.initializer)\n","    print(tf.get_default_session())\n","    result2 = f.eval()\n","result2"],"execution_count":23,"outputs":[{"output_type":"stream","text":["<tensorflow.python.client.session.Session object at 0x7f9cf80284a8>\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["42"]},"metadata":{"tags":[]},"execution_count":23}]},{"metadata":{"id":"q1nimxSxPJU9","colab_type":"code","outputId":"a833f039-4470-4e23-e620-75d93586c88c","executionInfo":{"status":"ok","timestamp":1556065880868,"user_tz":240,"elapsed":60776,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["result"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["42"]},"metadata":{"tags":[]},"execution_count":24}]},{"metadata":{"id":"MjN4KSJUqksC","colab_type":"code","outputId":"cbd01a09-71ab-4f13-e2cd-1b5335723901","executionInfo":{"status":"ok","timestamp":1556065880871,"user_tz":240,"elapsed":60756,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["print(tf.get_default_session())\n","print(tf.get_default_graph())"],"execution_count":25,"outputs":[{"output_type":"stream","text":["None\n","<tensorflow.python.framework.ops.Graph object at 0x7f9cf88548d0>\n"],"name":"stdout"}]},{"metadata":{"id":"b8t7UWvQPJVA","colab_type":"code","colab":{}},"cell_type":"code","source":["init = tf.global_variables_initializer()\n","\n","with tf.Session() as sess:\n","    init.run()\n","    result = f.eval()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"4u1B8FMakokf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"3d1fa0fb-4d1d-4fed-f855-78b44fdb5c80","executionInfo":{"status":"ok","timestamp":1556065880893,"user_tz":240,"elapsed":60740,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["init"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Operation 'init' type=NoOp>"]},"metadata":{"tags":[]},"execution_count":27}]},{"metadata":{"id":"Gb39QNiFPJVC","colab_type":"code","outputId":"b5733822-cf3c-4240-dc61-3ccfcfcacdd9","executionInfo":{"status":"ok","timestamp":1556065880894,"user_tz":240,"elapsed":60716,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["result"],"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["42"]},"metadata":{"tags":[]},"execution_count":28}]},{"metadata":{"id":"G8WGyQwEPJVF","colab_type":"code","colab":{}},"cell_type":"code","source":["init = tf.global_variables_initializer()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"yEhb3WP_PJVI","colab_type":"code","outputId":"3eb2dbb9-2d9a-4433-c292-2888a5c62d62","executionInfo":{"status":"ok","timestamp":1556065880898,"user_tz":240,"elapsed":60684,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"cell_type":"code","source":["sess = tf.InteractiveSession()\n","print(sess)\n","print(tf.get_default_session())\n","init.run()\n","result = f.eval()\n","print(result)"],"execution_count":30,"outputs":[{"output_type":"stream","text":["<tensorflow.python.client.session.InteractiveSession object at 0x7f9cf8028be0>\n","<tensorflow.python.client.session.InteractiveSession object at 0x7f9cf8028be0>\n","42\n"],"name":"stdout"}]},{"metadata":{"id":"cC1Hc0Y8uv9q","colab_type":"code","outputId":"18ec8835-6d43-4a50-9a90-79ea35bc6c4e","executionInfo":{"status":"ok","timestamp":1556065880900,"user_tz":240,"elapsed":60660,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["print(tf.get_default_session())"],"execution_count":31,"outputs":[{"output_type":"stream","text":["<tensorflow.python.client.session.InteractiveSession object at 0x7f9cf8028be0>\n"],"name":"stdout"}]},{"metadata":{"id":"CidajQ_mPJVN","colab_type":"code","colab":{}},"cell_type":"code","source":["sess.close()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"vzBfabuNPJVQ","colab_type":"code","outputId":"3f43be4c-d1ca-4c60-d045-0ef202153f33","executionInfo":{"status":"ok","timestamp":1556065880903,"user_tz":240,"elapsed":60624,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["result"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["42"]},"metadata":{"tags":[]},"execution_count":33}]},{"metadata":{"id":"hrg8IEdKk750","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"2ee59175-1b47-42b4-a464-7127763f6f5c","executionInfo":{"status":"ok","timestamp":1556065880904,"user_tz":240,"elapsed":60599,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["print(tf.get_default_session())"],"execution_count":34,"outputs":[{"output_type":"stream","text":["None\n"],"name":"stdout"}]},{"metadata":{"id":"rn_50WRDPJVU","colab_type":"text"},"cell_type":"markdown","source":["# Managing graphs"]},{"metadata":{"id":"99O5ojgXPJVV","colab_type":"code","outputId":"3586a58d-de88-4d13-e8e2-5079e6dc092c","executionInfo":{"status":"ok","timestamp":1556065880905,"user_tz":240,"elapsed":60575,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["reset_graph()\n","\n","x1 = tf.Variable(1)\n","x1.graph is tf.get_default_graph()"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":35}]},{"metadata":{"id":"9jXBPCqclmA3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"e0b030d6-b3d5-490b-ff95-81a7e6c82618","executionInfo":{"status":"ok","timestamp":1556065880906,"user_tz":240,"elapsed":60552,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["x.graph is tf.get_default_graph()"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":36}]},{"metadata":{"id":"LDMf9RU1PJVa","colab_type":"code","outputId":"b5e3dabe-6b41-41d4-9379-f9dc4e5b1303","executionInfo":{"status":"ok","timestamp":1556065880907,"user_tz":240,"elapsed":60522,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["\n","graph = tf.Graph()\n","with graph.as_default():\n","    x2 = tf.Variable(2)\n","\n","x2.graph is graph"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":37}]},{"metadata":{"scrolled":true,"id":"qt7nRnqTPJVf","colab_type":"code","outputId":"32d1a9b5-f666-4da3-c4a9-d7b48fa7e628","executionInfo":{"status":"ok","timestamp":1556065880907,"user_tz":240,"elapsed":60491,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["x2.graph is tf.get_default_graph()"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":38}]},{"metadata":{"id":"OQlsa1l4m-A6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"9ee89bbd-7e57-4aae-8bc2-6ba23dc72e63","executionInfo":{"status":"ok","timestamp":1556065880910,"user_tz":240,"elapsed":60468,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["x2.graph is graph"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":39}]},{"metadata":{"id":"2ELG0fNynHJ4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"a28f616b-bc6f-4c45-fbb5-28eb7b86ea0d","executionInfo":{"status":"ok","timestamp":1556065880911,"user_tz":240,"elapsed":60446,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["tf.reset_default_graph()\n","tf.get_default_graph()\n"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.framework.ops.Graph at 0x7f9cf8007e80>"]},"metadata":{"tags":[]},"execution_count":40}]},{"metadata":{"id":"1tHq9XBmnJI7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"839fad4d-8390-4ec0-f07c-69d251c7a078","executionInfo":{"status":"ok","timestamp":1556065880914,"user_tz":240,"elapsed":60424,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["x2.graph is tf.get_default_graph()"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False"]},"metadata":{"tags":[]},"execution_count":41}]},{"metadata":{"id":"g13f3Ua_nVqs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"ae1d72c9-1e69-4366-c154-6358c555ae9f","executionInfo":{"status":"ok","timestamp":1556065880915,"user_tz":240,"elapsed":60397,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["x2.graph"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.framework.ops.Graph at 0x7f9cf8007e48>"]},"metadata":{"tags":[]},"execution_count":42}]},{"metadata":{"id":"ali-AioynZHv","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"96c85756-2284-4834-dec1-2714b3d42858","executionInfo":{"status":"ok","timestamp":1556065880916,"user_tz":240,"elapsed":60371,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["x3 = tf.Variable(3)\n","x3.graph is tf.get_default_graph()"],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":43}]},{"metadata":{"id":"xxuhmyM8lviW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":55},"outputId":"226e3e35-a774-4a63-e8b6-3c438a41f3c9","executionInfo":{"status":"ok","timestamp":1556065880917,"user_tz":240,"elapsed":60347,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["tf.graph_util"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<module 'tensorflow._api.v1.graph_util' from '/usr/local/lib/python3.6/dist-packages/tensorflow/_api/v1/graph_util/__init__.py'>"]},"metadata":{"tags":[]},"execution_count":44}]},{"metadata":{"id":"1fohMAp2PJVh","colab_type":"code","outputId":"eef76010-71a2-4925-a5be-81b49dbc995f","executionInfo":{"status":"ok","timestamp":1556065880918,"user_tz":240,"elapsed":60324,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["w = tf.constant(3)\n","x = w + 2\n","y = x + 5\n","z = x * 3\n","\n","with tf.Session() as sess:\n","    print(y.eval())  # 10\n","    print(z.eval())  # 15"],"execution_count":45,"outputs":[{"output_type":"stream","text":["10\n","15\n"],"name":"stdout"}]},{"metadata":{"id":"I_l_y08Px2iV","colab_type":"code","outputId":"d0e46826-98f3-4dfd-f741-f5a8fb363fe9","executionInfo":{"status":"ok","timestamp":1556065880919,"user_tz":240,"elapsed":60300,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["\n","import numpy as np\n","w = tf.constant(np.array([1,2,3]), name='JB')\n","x = w + 2\n","y = x + 5\n","z = x * 3\n","\n","with tf.Session() as sess:\n","    print(y.eval())  # 10\n","    print(z.eval())  # 15"],"execution_count":46,"outputs":[{"output_type":"stream","text":["[ 8  9 10]\n","[ 9 12 15]\n"],"name":"stdout"}]},{"metadata":{"id":"Eze0Gb2XPJVl","colab_type":"code","outputId":"02ea0885-e0e6-4d12-deb2-7a657b140902","executionInfo":{"status":"ok","timestamp":1556065880920,"user_tz":240,"elapsed":60263,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["with tf.Session() as sess:\n","    y_val, z_val = sess.run([y, z])\n","    print(y_val)  # 10\n","    print(z_val)  # 15"],"execution_count":47,"outputs":[{"output_type":"stream","text":["[ 8  9 10]\n","[ 9 12 15]\n"],"name":"stdout"}]},{"metadata":{"id":"CVMC_r96uqtO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":294},"outputId":"d8115ec0-10fc-4f0e-c28f-e41aeedda033","executionInfo":{"status":"ok","timestamp":1556065885927,"user_tz":240,"elapsed":65234,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["!nvidia-smi"],"execution_count":48,"outputs":[{"output_type":"stream","text":["Wed Apr 24 00:31:24 2019       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 418.56       Driver Version: 410.79       CUDA Version: 10.0     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   60C    P0    27W /  70W |    131MiB / 15079MiB |      0%      Default |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                       GPU Memory |\n","|  GPU       PID   Type   Process name                             Usage      |\n","|=============================================================================|\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]},{"metadata":{"id":"uFW-iheGPJVr","colab_type":"text"},"cell_type":"markdown","source":["# Linear Regression"]},{"metadata":{"id":"Ma8WyqsfPJVs","colab_type":"text"},"cell_type":"markdown","source":["## Using the Normal Equation"]},{"metadata":{"id":"dbHINSB3PJVt","colab_type":"code","outputId":"a6c9366f-db90-4eaa-b8e1-2717380f9dff","executionInfo":{"status":"ok","timestamp":1556065887346,"user_tz":240,"elapsed":66634,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["import numpy as np\n","from sklearn.datasets import fetch_california_housing\n","\n","reset_graph()\n","\n","housing = fetch_california_housing()\n","m, n = housing.data.shape\n","housing_data_plus_bias = np.c_[np.ones((m, 1)), housing.data]\n","\n","# X = tf.constant(housing_data_plus_bias, dtype=tf.float32, name=\"X\")\n","X = tf.constant(housing_data_plus_bias, dtype=tf.float32)\n","# y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32)\n","XT = tf.transpose(X)\n","theta = tf.matmul(tf.matmul(tf.matrix_inverse(tf.matmul(XT, X)), XT), y)\n","\n","with tf.Session() as sess:\n","    theta_value = theta.eval()"],"execution_count":49,"outputs":[{"output_type":"stream","text":["Downloading Cal. housing from https://ndownloader.figshare.com/files/5976036 to /root/scikit_learn_data\n"],"name":"stderr"}]},{"metadata":{"id":"epCoK6eoPJVv","colab_type":"code","outputId":"836869bb-5290-47af-c93e-6164eb7006f9","executionInfo":{"status":"ok","timestamp":1556065887348,"user_tz":240,"elapsed":66615,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"cell_type":"code","source":["theta_value"],"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-3.7078091e+01],\n","       [ 4.3625212e-01],\n","       [ 9.4108758e-03],\n","       [-1.0677672e-01],\n","       [ 6.4300227e-01],\n","       [-4.0595369e-06],\n","       [-3.7829359e-03],\n","       [-4.2281592e-01],\n","       [-4.3611628e-01]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":50}]},{"metadata":{"id":"3VUUrdd7BFIA","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np\n","from sklearn.datasets import fetch_california_housing\n","\n","reset_graph()\n","\n","housing = fetch_california_housing()\n","m, n = housing.data.shape\n","housing_data_plus_bias = np.c_[np.ones((m, 1)), housing.data]\n","\n","# X = tf.constant(housing_data_plus_bias, dtype=tf.float32, name=\"X\")\n","X = tf.constant(housing_data_plus_bias, dtype=tf.float32)\n","# y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32)\n","XT = tf.transpose(X)\n","theta = tf.matmul(tf.matmul(tf.matrix_inverse(tf.matmul(XT, X)), XT), y)\n","\n","init = tf.global_variables_initializer()\n","\n","## should do it in a clean way\n","with tf.Session() as sess:\n","    sess.run(init)\n","    sess.run(theta)\n","    theta_value = theta.eval()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"FlXmkIXXBW-p","colab_type":"code","outputId":"096c21b5-42b6-4141-e2ad-2d55d02fe072","executionInfo":{"status":"ok","timestamp":1556065887353,"user_tz":240,"elapsed":66579,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"cell_type":"code","source":["theta_value"],"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-3.7078091e+01],\n","       [ 4.3625212e-01],\n","       [ 9.4108758e-03],\n","       [-1.0677672e-01],\n","       [ 6.4300227e-01],\n","       [-4.0595369e-06],\n","       [-3.7829359e-03],\n","       [-4.2281592e-01],\n","       [-4.3611628e-01]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":52}]},{"metadata":{"id":"xZ3a4PN-PJVy","colab_type":"text"},"cell_type":"markdown","source":["Compare with pure NumPy"]},{"metadata":{"id":"-OtOyUutPJVz","colab_type":"code","outputId":"f3f3bc1c-0dc4-4711-fbf4-a6706e918325","executionInfo":{"status":"ok","timestamp":1556065887354,"user_tz":240,"elapsed":66556,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":294}},"cell_type":"code","source":["X = housing_data_plus_bias\n","y = housing.target.reshape(-1, 1)\n","theta_numpy = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n","\n","print(theta_numpy)\n","y"],"execution_count":53,"outputs":[{"output_type":"stream","text":["[[-3.69419202e+01]\n"," [ 4.36693293e-01]\n"," [ 9.43577803e-03]\n"," [-1.07322041e-01]\n"," [ 6.45065694e-01]\n"," [-3.97638942e-06]\n"," [-3.78654265e-03]\n"," [-4.21314378e-01]\n"," [-4.34513755e-01]]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[4.526],\n","       [3.585],\n","       [3.521],\n","       ...,\n","       [0.923],\n","       [0.847],\n","       [0.894]])"]},"metadata":{"tags":[]},"execution_count":53}]},{"metadata":{"id":"8A3w0rF_PJV2","colab_type":"text"},"cell_type":"markdown","source":["Compare with Scikit-Learn"]},{"metadata":{"id":"DxYy9PgdPJV3","colab_type":"code","outputId":"c2a41f4d-788d-473f-c4f9-09ee4d56a612","executionInfo":{"status":"ok","timestamp":1556065887622,"user_tz":240,"elapsed":66794,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","lin_reg = LinearRegression()\n","lin_reg.fit(housing.data, housing.target.reshape(-1, 1))\n","\n","print(np.r_[lin_reg.intercept_.reshape(-1, 1), lin_reg.coef_.T])"],"execution_count":54,"outputs":[{"output_type":"stream","text":["[[-3.69419202e+01]\n"," [ 4.36693293e-01]\n"," [ 9.43577803e-03]\n"," [-1.07322041e-01]\n"," [ 6.45065694e-01]\n"," [-3.97638942e-06]\n"," [-3.78654265e-03]\n"," [-4.21314378e-01]\n"," [-4.34513755e-01]]\n"],"name":"stdout"}]},{"metadata":{"id":"Sey8C1SHxJU6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":190},"outputId":"e6b13834-75ee-43dc-d8e8-35612deb6fcb","executionInfo":{"status":"ok","timestamp":1556065887624,"user_tz":240,"elapsed":66766,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["lin_reg2 = LinearRegression()\n","lin_reg2.fit(X,y)\n","print(np.r_[lin_reg2.intercept_.reshape(-1,1), lin_reg2.coef_.T])"],"execution_count":55,"outputs":[{"output_type":"stream","text":["[[-3.69419202e+01]\n"," [ 0.00000000e+00]\n"," [ 4.36693293e-01]\n"," [ 9.43577803e-03]\n"," [-1.07322041e-01]\n"," [ 6.45065694e-01]\n"," [-3.97638942e-06]\n"," [-3.78654265e-03]\n"," [-4.21314378e-01]\n"," [-4.34513755e-01]]\n"],"name":"stdout"}]},{"metadata":{"id":"OgeA1dWfPJV8","colab_type":"text"},"cell_type":"markdown","source":["## Using Batch Gradient Descent"]},{"metadata":{"id":"Sd4rqd9IPJV9","colab_type":"text"},"cell_type":"markdown","source":["Gradient Descent requires scaling the feature vectors first. We could do this using TF, but let's just use Scikit-Learn for now."]},{"metadata":{"id":"X17NURYBPJV-","colab_type":"code","colab":{}},"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","scaled_housing_data = scaler.fit_transform(housing.data)\n","scaled_housing_data_plus_bias = np.c_[np.ones((m, 1)), scaled_housing_data]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"5bEefHa9y4Sy","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":363},"outputId":"41043307-4403-43b5-f286-dbd72edebcc0","executionInfo":{"status":"ok","timestamp":1556065887637,"user_tz":240,"elapsed":66743,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["np.ones((20,1))"],"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.],\n","       [1.]])"]},"metadata":{"tags":[]},"execution_count":57}]},{"metadata":{"id":"JUn8MpMLPJWB","colab_type":"code","outputId":"38284c6e-72c5-48e4-9b92-da9240e6a30c","executionInfo":{"status":"ok","timestamp":1556065887642,"user_tz":240,"elapsed":66723,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":138}},"cell_type":"code","source":["print(scaled_housing_data_plus_bias.mean(axis=0))\n","print(scaled_housing_data_plus_bias.mean(axis=1))\n","print(scaled_housing_data_plus_bias.mean())\n","print(scaled_housing_data_plus_bias.shape)"],"execution_count":58,"outputs":[{"output_type":"stream","text":["[ 1.00000000e+00  6.60969987e-17  5.50808322e-18  6.60969987e-17\n"," -1.06030602e-16 -1.10161664e-17  3.44255201e-18 -1.07958431e-15\n"," -8.52651283e-15]\n","[ 0.38915536  0.36424355  0.5116157  ... -0.06612179 -0.06360587\n","  0.01359031]\n","0.11111111111111005\n","(20640, 9)\n"],"name":"stdout"}]},{"metadata":{"id":"dml1vfwEPJWK","colab_type":"text"},"cell_type":"markdown","source":["### Manually computing the gradients"]},{"metadata":{"id":"Jxg_-JWxPJWM","colab_type":"code","outputId":"258eed04-1b42-49bd-a532-1c279ad662a7","executionInfo":{"status":"ok","timestamp":1556065889606,"user_tz":240,"elapsed":68661,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":225}},"cell_type":"code","source":["%%time\n","reset_graph()\n","\n","n_epochs = 1000\n","learning_rate = 0.01\n","\n","X = tf.constant(scaled_housing_data_plus_bias, dtype=tf.float32, name=\"X\")\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")\n","error = y_pred - y\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")\n","\n","## mamually compute gradient\n","gradients = 2/m * tf.matmul(tf.transpose(X), error)\n","\n","training_op = tf.assign(theta, theta - learning_rate * gradients)\n","\n","init = tf.global_variables_initializer()\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        if epoch % 100 == 0:\n","            print(\"Epoch\", epoch, \"MSE =\", mse.eval())\n","        sess.run(training_op)\n","    \n","    best_theta = theta.eval()"],"execution_count":59,"outputs":[{"output_type":"stream","text":["Epoch 0 MSE = 9.161542\n","Epoch 100 MSE = 0.7145004\n","Epoch 200 MSE = 0.56670487\n","Epoch 300 MSE = 0.5555718\n","Epoch 400 MSE = 0.5488112\n","Epoch 500 MSE = 0.5436363\n","Epoch 600 MSE = 0.5396291\n","Epoch 700 MSE = 0.5365092\n","Epoch 800 MSE = 0.53406775\n","Epoch 900 MSE = 0.5321473\n","CPU times: user 1.43 s, sys: 593 ms, total: 2.02 s\n","Wall time: 2.03 s\n"],"name":"stdout"}]},{"metadata":{"id":"IAXvQJG03EmZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"outputId":"ab3447dd-e422-4c01-c1f8-49d2547d731a","executionInfo":{"status":"ok","timestamp":1556065890627,"user_tz":240,"elapsed":69655,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["%%time\n","reset_graph()\n","\n","n_epochs = 1000\n","learning_rate = 0.01\n","\n","X = tf.constant(scaled_housing_data_plus_bias, dtype=tf.float32, name=\"X\")\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")\n","error = y_pred - y\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")\n","\n","## mamually compute gradient\n","gradients = 2/m * tf.matmul(tf.transpose(X), error)\n","\n","training_op = tf.assign(theta, theta - learning_rate * gradients)\n","\n","init = tf.global_variables_initializer()\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        if epoch % 100 == 0:\n","            print(\"Epoch\", epoch, \"MSE =\", mse.eval())\n","            ## should use as less sess.run() as possible\n","#         sess.run(y_pred)\n","#         sess.run(gradients)\n","#         sess.run(mse)\n","#         sess.run([y_pred, gradients, mse])\n","        sess.run(training_op)\n","    \n","    best_theta = theta.eval()"],"execution_count":60,"outputs":[{"output_type":"stream","text":["Epoch 0 MSE = 9.161542\n","Epoch 100 MSE = 0.7145004\n","Epoch 200 MSE = 0.56670487\n","Epoch 300 MSE = 0.5555718\n","Epoch 400 MSE = 0.5488112\n","Epoch 500 MSE = 0.5436363\n","Epoch 600 MSE = 0.5396291\n","Epoch 700 MSE = 0.5365092\n","Epoch 800 MSE = 0.53406775\n","Epoch 900 MSE = 0.5321473\n","CPU times: user 873 ms, sys: 122 ms, total: 994 ms\n","Wall time: 648 ms\n"],"name":"stdout"}]},{"metadata":{"id":"WkNqbEQIPJWO","colab_type":"code","outputId":"45fcc0bc-06c1-4c13-cf61-b3dac6ba5fc5","executionInfo":{"status":"ok","timestamp":1556065890630,"user_tz":240,"elapsed":69630,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"cell_type":"code","source":["best_theta"],"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 2.0685523 ],\n","       [ 0.8874027 ],\n","       [ 0.14401656],\n","       [-0.34770882],\n","       [ 0.36178368],\n","       [ 0.00393811],\n","       [-0.04269556],\n","       [-0.6614529 ],\n","       [-0.6375279 ]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":61}]},{"metadata":{"id":"-4CKJeLsILiO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"d83d60e9-ea96-4386-9487-45ce9790ae2b","executionInfo":{"status":"ok","timestamp":1556065890633,"user_tz":240,"elapsed":69608,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["cc = tf.Variable(3)\n","with tf.Session() as sess:\n","    k = tf.assign(cc,4)\n","    sess.run(k)\n","    print(cc.eval())"],"execution_count":62,"outputs":[{"output_type":"stream","text":["4\n"],"name":"stdout"}]},{"metadata":{"id":"pyIRPpAIPJWR","colab_type":"text"},"cell_type":"markdown","source":["### Using autodiff"]},{"metadata":{"id":"FvsWwr-APJWR","colab_type":"text"},"cell_type":"markdown","source":["Same as above except for the `gradients = ...` line:"]},{"metadata":{"id":"MgW5WsrTPJWS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"outputId":"e2651a83-d4c7-4432-a080-ebca50b33ced","executionInfo":{"status":"ok","timestamp":1556065891499,"user_tz":240,"elapsed":70450,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["%%time\n","reset_graph()\n","\n","n_epochs = 1000\n","learning_rate = 0.01\n","\n","X = tf.constant(scaled_housing_data_plus_bias, dtype=tf.float32, name=\"X\")\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")\n","error = y_pred - y\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")\n","gradients = tf.gradients(mse, [theta])[0]\n","\n","training_op = tf.assign(theta, theta - learning_rate * gradients)\n","\n","init = tf.global_variables_initializer()\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        if epoch % 100 == 0:\n","            print(\"Epoch\", epoch, \"MSE =\", mse.eval())\n","        sess.run(training_op)\n","    \n","    best_theta = theta.eval()"],"execution_count":63,"outputs":[{"output_type":"stream","text":["Epoch 0 MSE = 9.161542\n","Epoch 100 MSE = 0.71450037\n","Epoch 200 MSE = 0.56670487\n","Epoch 300 MSE = 0.5555718\n","Epoch 400 MSE = 0.54881126\n","Epoch 500 MSE = 0.5436363\n","Epoch 600 MSE = 0.53962916\n","Epoch 700 MSE = 0.5365092\n","Epoch 800 MSE = 0.53406775\n","Epoch 900 MSE = 0.5321473\n","CPU times: user 874 ms, sys: 117 ms, total: 992 ms\n","Wall time: 717 ms\n"],"name":"stdout"}]},{"metadata":{"id":"sB-QqfI1PJWZ","colab_type":"code","outputId":"52e3a805-07f0-4cb4-8f8a-b787427877a7","executionInfo":{"status":"ok","timestamp":1556065891500,"user_tz":240,"elapsed":70425,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":190}},"cell_type":"code","source":["\n","\n","print(\"Best theta:\")\n","print(best_theta)"],"execution_count":64,"outputs":[{"output_type":"stream","text":["Best theta:\n","[[ 2.0685523 ]\n"," [ 0.8874027 ]\n"," [ 0.14401656]\n"," [-0.3477088 ]\n"," [ 0.36178365]\n"," [ 0.00393811]\n"," [-0.04269556]\n"," [-0.66145283]\n"," [-0.6375278 ]]\n"],"name":"stdout"}]},{"metadata":{"id":"WcYt-xjp59Rx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"outputId":"80fd316a-d34b-4147-9f28-380c44d3b9c3","executionInfo":{"status":"ok","timestamp":1556065891712,"user_tz":240,"elapsed":70613,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["%%time\n","reset_graph()\n","\n","n_epochs = 1000\n","learning_rate = 0.01\n","\n","X = tf.constant(scaled_housing_data_plus_bias, dtype=tf.float32, name=\"X\")\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")\n","error = y_pred - y\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")\n","gradients = tf.gradients(mse, [theta])[0]\n","\n","training_op = tf.assign(theta, theta - learning_rate * gradients)\n","\n","init = tf.global_variables_initializer()\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        if epoch % 100 == 0:\n","            print(\"Epoch\", epoch, \"MSE =\", mse.eval())\n","        sess.run(training_op)\n","    \n","    best_theta = theta.eval()"],"execution_count":65,"outputs":[{"output_type":"stream","text":["Epoch 0 MSE = 9.161542\n","Epoch 100 MSE = 0.71450037\n","Epoch 200 MSE = 0.56670487\n","Epoch 300 MSE = 0.5555718\n","Epoch 400 MSE = 0.54881126\n","Epoch 500 MSE = 0.5436363\n","Epoch 600 MSE = 0.53962916\n","Epoch 700 MSE = 0.5365092\n","Epoch 800 MSE = 0.53406775\n","Epoch 900 MSE = 0.5321473\n","CPU times: user 860 ms, sys: 116 ms, total: 976 ms\n","Wall time: 675 ms\n"],"name":"stdout"}]},{"metadata":{"id":"kXslkhUSPJWe","colab_type":"text"},"cell_type":"markdown","source":["How could you find the partial derivatives of the following function with regards to `a` and `b`?"]},{"metadata":{"id":"hiN4I8ZRPJWf","colab_type":"code","colab":{}},"cell_type":"code","source":["def my_func(a, b):\n","    z = 0\n","    for i in range(100):\n","        z = a * np.cos(z + i) + z * np.sin(b - i)\n","    return z"],"execution_count":0,"outputs":[]},{"metadata":{"id":"NX3eJiLqPJWi","colab_type":"code","outputId":"6ce47d10-0ed8-4024-ff46-99aa9325c676","executionInfo":{"status":"ok","timestamp":1556065892410,"user_tz":240,"elapsed":71273,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["my_func(0.2, 0.3)"],"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-0.21253923284754914"]},"metadata":{"tags":[]},"execution_count":67}]},{"metadata":{"id":"1AEun8VWPJWp","colab_type":"text"},"cell_type":"markdown","source":["Let's compute the function at $a=0.2$ and $b=0.3$, and the partial derivatives at that point with regards to $a$ and with regards to $b$:"]},{"metadata":{"id":"0Vg7ihUgPJWn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":86},"outputId":"6104cb7a-05ef-4ea2-96b9-18c0b5f98587","executionInfo":{"status":"ok","timestamp":1556065894243,"user_tz":240,"elapsed":73081,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["%%time\n","reset_graph()\n","\n","a = tf.Variable(0.2, name=\"a\")\n","b = tf.Variable(0.3, name=\"b\")\n","z = tf.constant(0.0, name=\"z0\")\n","for i in range(100):\n","    z = a * tf.cos(z + i) + z * tf.sin(b - i)\n","\n","grads = tf.gradients(z, [a, b])\n","init = tf.global_variables_initializer()\n","\n","with tf.Session() as sess:\n","    init.run()\n","    print(z.eval())\n","    print(sess.run(grads))"],"execution_count":68,"outputs":[{"output_type":"stream","text":["-0.21253741\n","[-1.1388495, 0.19671397]\n","CPU times: user 2.22 s, sys: 44 ms, total: 2.26 s\n","Wall time: 2.25 s\n"],"name":"stdout"}]},{"metadata":{"id":"EK8SI1asPJWw","colab_type":"text"},"cell_type":"markdown","source":["### Using a `GradientDescentOptimizer`"]},{"metadata":{"id":"vHKmBG-bPJWx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"outputId":"35b870fe-06ff-468a-8841-cee944bef47a","executionInfo":{"status":"ok","timestamp":1556065895329,"user_tz":240,"elapsed":74139,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["%%time\n","reset_graph()\n","\n","n_epochs = 1000\n","learning_rate = 0.01\n","\n","X = tf.constant(scaled_housing_data_plus_bias, dtype=tf.float32, name=\"X\")\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")\n","error = y_pred - y\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")\n","\n","optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\n","# optimizer = tf.train.tf.train.AdamOptimizer\n","training_op = optimizer.minimize(mse)\n","\n","init = tf.global_variables_initializer()\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        if epoch % 100 == 0:\n","            print(\"Epoch\", epoch, \"MSE =\", mse.eval())\n","        sess.run(training_op)\n","    \n","    best_theta = theta.eval()"],"execution_count":69,"outputs":[{"output_type":"stream","text":["Epoch 0 MSE = 9.161542\n","Epoch 100 MSE = 0.7145004\n","Epoch 200 MSE = 0.56670487\n","Epoch 300 MSE = 0.5555718\n","Epoch 400 MSE = 0.54881126\n","Epoch 500 MSE = 0.5436363\n","Epoch 600 MSE = 0.53962916\n","Epoch 700 MSE = 0.5365092\n","Epoch 800 MSE = 0.53406775\n","Epoch 900 MSE = 0.5321473\n","CPU times: user 687 ms, sys: 106 ms, total: 793 ms\n","Wall time: 656 ms\n"],"name":"stdout"}]},{"metadata":{"id":"1zKD3aFIPJW0","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"outputId":"ab82abd1-51f6-4d2e-fa04-74a1aa23aa18","executionInfo":{"status":"ok","timestamp":1556065895633,"user_tz":240,"elapsed":74416,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["%%time\n","reset_graph()\n","\n","n_epochs = 1000\n","learning_rate = 0.01\n","\n","X = tf.constant(scaled_housing_data_plus_bias, dtype=tf.float32, name=\"X\")\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")\n","error = y_pred - y\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")\n","\n","# optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\n","optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate)\n","training_op = optimizer.minimize(mse)\n","\n","init = tf.global_variables_initializer()\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        if epoch % 100 == 0:\n","            print(\"Epoch\", epoch, \"MSE =\", mse.eval())\n","        sess.run(training_op)\n","    \n","    best_theta = theta.eval()"],"execution_count":70,"outputs":[{"output_type":"stream","text":["Epoch 0 MSE = 9.161542\n","Epoch 100 MSE = 2.5381856\n","Epoch 200 MSE = 1.0048895\n","Epoch 300 MSE = 0.61469686\n","Epoch 400 MSE = 0.5367421\n","Epoch 500 MSE = 0.5257724\n","Epoch 600 MSE = 0.5245355\n","Epoch 700 MSE = 0.524368\n","Epoch 800 MSE = 0.5243321\n","Epoch 900 MSE = 0.5243234\n","CPU times: user 723 ms, sys: 114 ms, total: 837 ms\n","Wall time: 697 ms\n"],"name":"stdout"}]},{"metadata":{"id":"HfI695x16y2X","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"outputId":"399d9b05-087f-4d3e-b077-a4a72372c2a5","executionInfo":{"status":"ok","timestamp":1556065896174,"user_tz":240,"elapsed":74931,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["%%time\n","reset_graph()\n","\n","n_epochs = 1000\n","learning_rate = 0.01\n","\n","X = tf.constant(scaled_housing_data_plus_bias, dtype=tf.float32, name=\"X\")\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")\n","error = y_pred - y\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")\n","\n","# optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\n","# optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate)\n","optimizer = tf.train.MomentumOptimizer(learning_rate=learning_rate,momentum=0.9)\n","training_op = optimizer.minimize(mse)\n","\n","init = tf.global_variables_initializer()\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        if epoch % 100 == 0:\n","            print(\"Epoch\", epoch, \"MSE =\", mse.eval())\n","        sess.run(training_op)\n","    \n","    best_theta = theta.eval()"],"execution_count":71,"outputs":[{"output_type":"stream","text":["Epoch 0 MSE = 9.161542\n","Epoch 100 MSE = 0.53056407\n","Epoch 200 MSE = 0.52501124\n","Epoch 300 MSE = 0.5244107\n","Epoch 400 MSE = 0.5243329\n","Epoch 500 MSE = 0.52432257\n","Epoch 600 MSE = 0.5243212\n","Epoch 700 MSE = 0.524321\n","Epoch 800 MSE = 0.524321\n","Epoch 900 MSE = 0.52432096\n","CPU times: user 685 ms, sys: 106 ms, total: 791 ms\n","Wall time: 662 ms\n"],"name":"stdout"}]},{"metadata":{"id":"KKw-7N2hPJW9","colab_type":"code","outputId":"c58e5983-05dc-4d59-aa05-98ca60f6ecfe","executionInfo":{"status":"ok","timestamp":1556065896175,"user_tz":240,"elapsed":74902,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":190}},"cell_type":"code","source":["print(\"Best theta:\")\n","print(best_theta)"],"execution_count":72,"outputs":[{"output_type":"stream","text":["Best theta:\n","[[ 2.068558  ]\n"," [ 0.82962847]\n"," [ 0.11875335]\n"," [-0.26554456]\n"," [ 0.3057109 ]\n"," [-0.00450249]\n"," [-0.03932662]\n"," [-0.8998645 ]\n"," [-0.8705207 ]]\n"],"name":"stdout"}]},{"metadata":{"id":"Bh_efJ5EPJXC","colab_type":"text"},"cell_type":"markdown","source":["### Using a momentum optimizer"]},{"metadata":{"id":"bWMIUWQMPJXG","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","n_epochs = 1000\n","learning_rate = 0.01\n","\n","X = tf.constant(scaled_housing_data_plus_bias, dtype=tf.float32, name=\"X\")\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")\n","error = y_pred - y\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"A-b5mfWpPJXJ","colab_type":"code","colab":{}},"cell_type":"code","source":["optimizer = tf.train.MomentumOptimizer(learning_rate=learning_rate,\n","                                       momentum=0.9)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"YQcKvE5BPJXP","colab_type":"code","colab":{}},"cell_type":"code","source":["training_op = optimizer.minimize(mse)\n","\n","init = tf.global_variables_initializer()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"czAYLpLQPJXQ","colab_type":"code","outputId":"ca85f8a7-9f9a-49fc-feaa-c62bceba495c","executionInfo":{"status":"ok","timestamp":1556065897523,"user_tz":240,"elapsed":76179,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":190}},"cell_type":"code","source":["with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        sess.run(training_op)\n","    \n","    best_theta = theta.eval()\n","\n","print(\"Best theta:\")\n","print(best_theta)"],"execution_count":76,"outputs":[{"output_type":"stream","text":["Best theta:\n","[[ 2.068558  ]\n"," [ 0.82962847]\n"," [ 0.11875335]\n"," [-0.26554456]\n"," [ 0.3057109 ]\n"," [-0.00450249]\n"," [-0.03932662]\n"," [-0.8998645 ]\n"," [-0.8705207 ]]\n"],"name":"stdout"}]},{"metadata":{"id":"-n84VYO3PJXT","colab_type":"text"},"cell_type":"markdown","source":["# Feeding data to the training algorithm"]},{"metadata":{"id":"b5n0riiRPJXU","colab_type":"text"},"cell_type":"markdown","source":["## Placeholder nodes"]},{"metadata":{"id":"JkePSb0VPJXU","colab_type":"code","outputId":"3a192e07-4fce-46da-c19d-37100fc573f3","executionInfo":{"status":"ok","timestamp":1556065897525,"user_tz":240,"elapsed":76152,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"cell_type":"code","source":["%%time\n","reset_graph()\n","\n","# A = tf.placeholder(tf.float32, shape=(None, 3))\n","A = tf.placeholder(tf.float32, shape=(None, None))\n","B = A + 5\n","with tf.Session() as sess:\n","    B_val_1 = B.eval(feed_dict={A: [[1, 2, 3]]})\n","    B_val_2 = B.eval(feed_dict={A: [[4, 5, 6], [7, 8, 9]]})\n","print(B_val_1)"],"execution_count":77,"outputs":[{"output_type":"stream","text":["[[6. 7. 8.]]\n","CPU times: user 11.8 ms, sys: 1.77 ms, total: 13.6 ms\n","Wall time: 13 ms\n"],"name":"stdout"}]},{"metadata":{"id":"pc92PEkw98gb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"outputId":"4b86f372-32af-4e4e-f0ba-a4f62260aeb8","executionInfo":{"status":"ok","timestamp":1556065897526,"user_tz":240,"elapsed":76122,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["%%time\n","reset_graph()\n","\n","A = tf.placeholder(tf.float32, shape=(None, 3))\n","# A = tf.placeholder(tf.float32, shape=(None, None))\n","B = A + 5\n","with tf.Session() as sess:\n","    B_val_1 = B.eval(feed_dict={A: [[1, 2, 3]]})\n","    B_val_2 = B.eval(feed_dict={A: [[4, 5, 6], [7, 8, 9]]})\n","print(B_val_1)"],"execution_count":78,"outputs":[{"output_type":"stream","text":["[[6. 7. 8.]]\n","CPU times: user 9 ms, sys: 2 ms, total: 11 ms\n","Wall time: 10.8 ms\n"],"name":"stdout"}]},{"metadata":{"id":"cD2LXgBlPJXY","colab_type":"code","outputId":"c003c982-3932-4ecd-94ab-631db4299982","executionInfo":{"status":"ok","timestamp":1556065897527,"user_tz":240,"elapsed":76096,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["print(B_val_2)"],"execution_count":79,"outputs":[{"output_type":"stream","text":["[[ 9. 10. 11.]\n"," [12. 13. 14.]]\n"],"name":"stdout"}]},{"metadata":{"id":"VD-L5Vq0PJXZ","colab_type":"text"},"cell_type":"markdown","source":["## Mini-batch Gradient Descent"]},{"metadata":{"id":"_mXiHpQrPJXa","colab_type":"code","colab":{}},"cell_type":"code","source":["n_epochs = 1000\n","learning_rate = 0.01"],"execution_count":0,"outputs":[]},{"metadata":{"id":"OTztKQ7_PJXc","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","## what's the usage of 'name'? --> to save & load the variable\n","X = tf.placeholder(tf.float32, shape=(None, n + 1), name=\"X\")\n","y = tf.placeholder(tf.float32, shape=(None, 1), name=\"y\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"OvpBJwfsPJXh","colab_type":"code","colab":{}},"cell_type":"code","source":["theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")\n","error = y_pred - y\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")\n","optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\n","training_op = optimizer.minimize(mse)\n","\n","init = tf.global_variables_initializer()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"HlpbAB9DPJXp","colab_type":"code","colab":{}},"cell_type":"code","source":["n_epochs = 10\n","batch_size = 100\n","n_batches = int(np.ceil(m / batch_size))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"fS8UszFhPJXt","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"outputId":"2f3ebe0c-b2ee-4097-9742-5543e0869a9b","executionInfo":{"status":"ok","timestamp":1556065899770,"user_tz":240,"elapsed":78267,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["%%time\n","def fetch_batch(epoch, batch_index, batch_size):\n","    np.random.seed(epoch * n_batches + batch_index)  # not shown in the book\n","    indices = np.random.randint(m, size=batch_size)  # not shown\n","    ## data may overlap in each mini-batch\n","    X_batch = scaled_housing_data_plus_bias[indices] # not shown\n","    y_batch = housing.target.reshape(-1, 1)[indices] # not shown\n","    return X_batch, y_batch\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        for batch_index in range(n_batches):\n","            X_batch, y_batch = fetch_batch(epoch, batch_index, batch_size)\n","            sess.run(training_op, feed_dict={X: X_batch, y: y_batch})\n","\n","    best_theta = theta.eval()"],"execution_count":84,"outputs":[{"output_type":"stream","text":["CPU times: user 2.74 s, sys: 227 ms, total: 2.97 s\n","Wall time: 2.01 s\n"],"name":"stdout"}]},{"metadata":{"id":"nPiyxeAJPJXw","colab_type":"code","outputId":"cfb04cf7-a757-4c62-dcb6-5449b13f4880","executionInfo":{"status":"ok","timestamp":1556065899771,"user_tz":240,"elapsed":78245,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"cell_type":"code","source":["best_theta"],"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 2.0703337 ],\n","       [ 0.8637145 ],\n","       [ 0.12255152],\n","       [-0.31211877],\n","       [ 0.38510376],\n","       [ 0.00434168],\n","       [-0.0123295 ],\n","       [-0.83376896],\n","       [-0.8030471 ]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":85}]},{"metadata":{"id":"DMOBdknJPJXy","colab_type":"text"},"cell_type":"markdown","source":["# Saving and restoring a model"]},{"metadata":{"id":"MAZYK4SKPJXy","colab_type":"code","outputId":"f882ad93-838f-466a-99ea-c72f1cfec2b1","executionInfo":{"status":"ok","timestamp":1556065900042,"user_tz":240,"elapsed":78490,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":262}},"cell_type":"code","source":["reset_graph()\n","\n","n_epochs = 1000                                                                       # not shown in the book\n","learning_rate = 0.01                                                                  # not shown\n","\n","X = tf.constant(scaled_housing_data_plus_bias, dtype=tf.float32, name=\"X\")            # not shown\n","y = tf.constant(housing.target.reshape(-1, 1), dtype=tf.float32, name=\"y\")            # not shown\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")                                      # not shown\n","error = y_pred - y                                                                    # not shown\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")                                    # not shown\n","optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)            # not shown\n","training_op = optimizer.minimize(mse)                                                 # not shown\n","\n","init = tf.global_variables_initializer()\n","saver = tf.train.Saver()\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        if epoch % 100 == 0:\n","            print(\"Epoch\", epoch, \"MSE =\", mse.eval())                                # not shown\n","            save_path = saver.save(sess, \"/tmp/my_model\"+ str(epoch) +\".ckpt\")\n","        sess.run(training_op)\n","    \n","    best_theta = theta.eval()\n","    save_path = saver.save(sess, \"/tmp/my_model_final.ckpt\")"],"execution_count":86,"outputs":[{"output_type":"stream","text":["Epoch 0 MSE = 9.161542\n","Epoch 100 MSE = 0.7145004\n","Epoch 200 MSE = 0.56670487\n","Epoch 300 MSE = 0.5555718\n","Epoch 400 MSE = 0.54881126\n","Epoch 500 MSE = 0.5436363\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/saver.py:966: remove_checkpoint (from tensorflow.python.training.checkpoint_management) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use standard file APIs to delete files with this prefix.\n","Epoch 600 MSE = 0.53962916\n","Epoch 700 MSE = 0.5365092\n","Epoch 800 MSE = 0.53406775\n","Epoch 900 MSE = 0.5321473\n"],"name":"stdout"}]},{"metadata":{"id":"ADJFJlePPJX1","colab_type":"code","outputId":"9b8dec61-0de3-4d82-e874-ce6318c9ff16","executionInfo":{"status":"ok","timestamp":1556065900044,"user_tz":240,"elapsed":78468,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"cell_type":"code","source":["best_theta"],"execution_count":87,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 2.0685523 ],\n","       [ 0.8874027 ],\n","       [ 0.14401656],\n","       [-0.3477088 ],\n","       [ 0.36178365],\n","       [ 0.00393811],\n","       [-0.04269556],\n","       [-0.66145283],\n","       [-0.6375278 ]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":87}]},{"metadata":{"id":"Ccl-fWbKPJX4","colab_type":"code","outputId":"eb9e5cb4-11b4-45d7-e979-f38abbcbde93","executionInfo":{"status":"ok","timestamp":1556065900734,"user_tz":240,"elapsed":79136,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":106}},"cell_type":"code","source":["with tf.Session() as sess:\n","    saver.restore(sess, \"/tmp/my_model_final.ckpt\")\n","    best_theta_restored = theta.eval() # not shown in the book"],"execution_count":88,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/saver.py:1266: checkpoint_exists (from tensorflow.python.training.checkpoint_management) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use standard file APIs to check for files with this prefix.\n","INFO:tensorflow:Restoring parameters from /tmp/my_model_final.ckpt\n"],"name":"stdout"}]},{"metadata":{"id":"4Uj7N59uPJX6","colab_type":"code","outputId":"651c6f76-9331-4757-c418-f041d430d1cc","executionInfo":{"status":"ok","timestamp":1556065900735,"user_tz":240,"elapsed":79111,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["np.allclose(best_theta, best_theta_restored)"],"execution_count":89,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":89}]},{"metadata":{"id":"IgDE8TnlPJX9","colab_type":"text"},"cell_type":"markdown","source":["If you want to have a saver that loads and restores `theta` with a different name, such as `\"weights\"`:"]},{"metadata":{"id":"uwUQtdXJPJX_","colab_type":"code","colab":{}},"cell_type":"code","source":["saver = tf.train.Saver({\"weights\": theta})"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Un7GzbzdPJYD","colab_type":"text"},"cell_type":"markdown","source":["By default the saver also saves the graph structure itself in a second file with the extension `.meta`. You can use the function `tf.train.import_meta_graph()` to restore the graph structure. This function loads the graph into the default graph and returns a `Saver` that can then be used to restore the graph state (i.e., the variable values):"]},{"metadata":{"id":"okxL13w3PJYE","colab_type":"code","outputId":"b00ee1a6-f14c-457e-a078-22f1556d8ad0","executionInfo":{"status":"ok","timestamp":1556065900738,"user_tz":240,"elapsed":79077,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["reset_graph()\n","# notice that we start with an empty graph.\n","\n","saver = tf.train.import_meta_graph(\"/tmp/my_model_final.ckpt.meta\")  # this loads the graph structure\n","theta = tf.get_default_graph().get_tensor_by_name(\"theta:0\") # not shown in the book\n","\n","with tf.Session() as sess:\n","    saver.restore(sess, \"/tmp/my_model_final.ckpt\")  # this restores the graph's state\n","    best_theta_restored = theta.eval() # not shown in the book"],"execution_count":91,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Restoring parameters from /tmp/my_model_final.ckpt\n"],"name":"stdout"}]},{"metadata":{"id":"ziECm3u-PJYG","colab_type":"code","outputId":"717b8e05-8608-4d20-8e2a-bdd0484fd83c","executionInfo":{"status":"ok","timestamp":1556065900739,"user_tz":240,"elapsed":79051,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["np.allclose(best_theta, best_theta_restored)"],"execution_count":92,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":92}]},{"metadata":{"id":"JjB5miaNBnI6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":155},"outputId":"98ce08a1-2007-4378-ab18-ee1aeb969647","executionInfo":{"status":"ok","timestamp":1556065904436,"user_tz":240,"elapsed":82720,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}}},"cell_type":"code","source":["!ls /tmp"],"execution_count":93,"outputs":[{"output_type":"stream","text":["checkpoint\t\t\t      my_model800.ckpt.index\n","my_model600.ckpt.data-00000-of-00001  my_model800.ckpt.meta\n","my_model600.ckpt.index\t\t      my_model900.ckpt.data-00000-of-00001\n","my_model600.ckpt.meta\t\t      my_model900.ckpt.index\n","my_model700.ckpt.data-00000-of-00001  my_model900.ckpt.meta\n","my_model700.ckpt.index\t\t      my_model_final.ckpt.data-00000-of-00001\n","my_model700.ckpt.meta\t\t      my_model_final.ckpt.index\n","my_model800.ckpt.data-00000-of-00001  my_model_final.ckpt.meta\n"],"name":"stdout"}]},{"metadata":{"id":"M9427SZePJYJ","colab_type":"text"},"cell_type":"markdown","source":["This means that you can import a pretrained model without having to have the corresponding Python code to build the graph. This is very handy when you keep tweaking and saving your model: you can load a previously saved model without having to search for the version of the code that built it."]},{"metadata":{"id":"B0RQI5jUPJYK","colab_type":"text"},"cell_type":"markdown","source":["# Visualizing the graph\n","## inside Jupyter"]},{"metadata":{"id":"Hg0bgGPDPJYK","colab_type":"text"},"cell_type":"markdown","source":["To visualize the graph within Jupyter, we will use a TensorBoard server available online at https://tensorboard.appspot.com/ (so this will not work if you do not have Internet access).  As far as I can tell, this code was originally written by Alex Mordvintsev in his [DeepDream tutorial](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/deepdream/deepdream.ipynb). Alternatively, you could use a tool like [tfgraphviz](https://github.com/akimach/tfgraphviz)."]},{"metadata":{"id":"wW3DTnKxPJYL","colab_type":"code","colab":{}},"cell_type":"code","source":["from tensorflow_graph_in_jupyter import show_graph"],"execution_count":0,"outputs":[]},{"metadata":{"scrolled":true,"id":"pdXIHMxdPJYR","colab_type":"code","outputId":"6e1912d1-49de-4523-b224-b475d5bb8e02","executionInfo":{"status":"ok","timestamp":1556068834549,"user_tz":240,"elapsed":427,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":662}},"cell_type":"code","source":["show_graph(tf.get_default_graph())"],"execution_count":127,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","        <iframe seamless style=\"width:1200px;height:620px;border:0\" srcdoc=\"\n","        <script src=&quot;//cdnjs.cloudflare.com/ajax/libs/polymer/0.3.3/platform.js&quot;></script>\n","        <script>\n","          function load() {\n","            document.getElementById(&quot;graph0.3745401188473625&quot;).pbtxt = 'node {\\n  name: &quot;X&quot;\\n  op: &quot;Placeholder&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;shape&quot;\\n    value {\\n      shape {\\n        dim {\\n          size: -1\\n        }\\n        dim {\\n          size: 9\\n        }\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;y&quot;\\n  op: &quot;Placeholder&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;shape&quot;\\n    value {\\n      shape {\\n        dim {\\n          size: -1\\n        }\\n        dim {\\n          size: 1\\n        }\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;random_uniform/shape&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_INT32\\n        tensor_shape {\\n          dim {\\n            size: 2\\n          }\\n        }\\n        tensor_content: &quot;\\\\t\\\\000\\\\000\\\\000\\\\001\\\\000\\\\000\\\\000&quot;\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;random_uniform/min&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_FLOAT\\n        tensor_shape {\\n        }\\n        float_val: -1.0\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;random_uniform/max&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_FLOAT\\n        tensor_shape {\\n        }\\n        float_val: 1.0\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;random_uniform/RandomUniform&quot;\\n  op: &quot;RandomUniform&quot;\\n  input: &quot;random_uniform/shape&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;seed&quot;\\n    value {\\n      i: 42\\n    }\\n  }\\n  attr {\\n    key: &quot;seed2&quot;\\n    value {\\n      i: 42\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;random_uniform/sub&quot;\\n  op: &quot;Sub&quot;\\n  input: &quot;random_uniform/max&quot;\\n  input: &quot;random_uniform/min&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;random_uniform/mul&quot;\\n  op: &quot;Mul&quot;\\n  input: &quot;random_uniform/RandomUniform&quot;\\n  input: &quot;random_uniform/sub&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;random_uniform&quot;\\n  op: &quot;Add&quot;\\n  input: &quot;random_uniform/mul&quot;\\n  input: &quot;random_uniform/min&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;theta&quot;\\n  op: &quot;VariableV2&quot;\\n  attr {\\n    key: &quot;container&quot;\\n    value {\\n      s: &quot;&quot;\\n    }\\n  }\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;shape&quot;\\n    value {\\n      shape {\\n        dim {\\n          size: 9\\n        }\\n        dim {\\n          size: 1\\n        }\\n      }\\n    }\\n  }\\n  attr {\\n    key: &quot;shared_name&quot;\\n    value {\\n      s: &quot;&quot;\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;theta/Assign&quot;\\n  op: &quot;Assign&quot;\\n  input: &quot;theta&quot;\\n  input: &quot;random_uniform&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;_class&quot;\\n    value {\\n      list {\\n        s: &quot;loc:@theta&quot;\\n      }\\n    }\\n  }\\n  attr {\\n    key: &quot;use_locking&quot;\\n    value {\\n      b: true\\n    }\\n  }\\n  attr {\\n    key: &quot;validate_shape&quot;\\n    value {\\n      b: true\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;theta/read&quot;\\n  op: &quot;Identity&quot;\\n  input: &quot;theta&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;_class&quot;\\n    value {\\n      list {\\n        s: &quot;loc:@theta&quot;\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;predictions&quot;\\n  op: &quot;MatMul&quot;\\n  input: &quot;X&quot;\\n  input: &quot;theta/read&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;transpose_a&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n  attr {\\n    key: &quot;transpose_b&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;loss/sub&quot;\\n  op: &quot;Sub&quot;\\n  input: &quot;predictions&quot;\\n  input: &quot;y&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;loss/Square&quot;\\n  op: &quot;Square&quot;\\n  input: &quot;loss/sub&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;loss/Const&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_INT32\\n        tensor_shape {\\n          dim {\\n            size: 2\\n          }\\n        }\\n        tensor_content: &quot;\\\\000\\\\000\\\\000\\\\000\\\\001\\\\000\\\\000\\\\000&quot;\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;loss/mse&quot;\\n  op: &quot;Mean&quot;\\n  input: &quot;loss/Square&quot;\\n  input: &quot;loss/Const&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;Tidx&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;keep_dims&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/Shape&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_INT32\\n        tensor_shape {\\n          dim {\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/grad_ys_0&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_FLOAT\\n        tensor_shape {\\n        }\\n        float_val: 1.0\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/Fill&quot;\\n  op: &quot;Fill&quot;\\n  input: &quot;gradients/Shape&quot;\\n  input: &quot;gradients/grad_ys_0&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;index_type&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Reshape/shape&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_INT32\\n        tensor_shape {\\n          dim {\\n            size: 2\\n          }\\n        }\\n        tensor_content: &quot;\\\\001\\\\000\\\\000\\\\000\\\\001\\\\000\\\\000\\\\000&quot;\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Reshape&quot;\\n  op: &quot;Reshape&quot;\\n  input: &quot;gradients/Fill&quot;\\n  input: &quot;gradients/loss/mse_grad/Reshape/shape&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;Tshape&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Shape&quot;\\n  op: &quot;Shape&quot;\\n  input: &quot;loss/Square&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;out_type&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Tile&quot;\\n  op: &quot;Tile&quot;\\n  input: &quot;gradients/loss/mse_grad/Reshape&quot;\\n  input: &quot;gradients/loss/mse_grad/Shape&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;Tmultiples&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Shape_1&quot;\\n  op: &quot;Shape&quot;\\n  input: &quot;loss/Square&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;out_type&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Shape_2&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_INT32\\n        tensor_shape {\\n          dim {\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Const&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_INT32\\n        tensor_shape {\\n          dim {\\n            size: 1\\n          }\\n        }\\n        int_val: 0\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Prod&quot;\\n  op: &quot;Prod&quot;\\n  input: &quot;gradients/loss/mse_grad/Shape_1&quot;\\n  input: &quot;gradients/loss/mse_grad/Const&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;Tidx&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;keep_dims&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Const_1&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_INT32\\n        tensor_shape {\\n          dim {\\n            size: 1\\n          }\\n        }\\n        int_val: 0\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Prod_1&quot;\\n  op: &quot;Prod&quot;\\n  input: &quot;gradients/loss/mse_grad/Shape_2&quot;\\n  input: &quot;gradients/loss/mse_grad/Const_1&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;Tidx&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;keep_dims&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Maximum/y&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_INT32\\n        tensor_shape {\\n        }\\n        int_val: 1\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Maximum&quot;\\n  op: &quot;Maximum&quot;\\n  input: &quot;gradients/loss/mse_grad/Prod_1&quot;\\n  input: &quot;gradients/loss/mse_grad/Maximum/y&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/floordiv&quot;\\n  op: &quot;FloorDiv&quot;\\n  input: &quot;gradients/loss/mse_grad/Prod&quot;\\n  input: &quot;gradients/loss/mse_grad/Maximum&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/Cast&quot;\\n  op: &quot;Cast&quot;\\n  input: &quot;gradients/loss/mse_grad/floordiv&quot;\\n  attr {\\n    key: &quot;DstT&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;SrcT&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;Truncate&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/mse_grad/truediv&quot;\\n  op: &quot;RealDiv&quot;\\n  input: &quot;gradients/loss/mse_grad/Tile&quot;\\n  input: &quot;gradients/loss/mse_grad/Cast&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/Square_grad/Const&quot;\\n  op: &quot;Const&quot;\\n  input: &quot;^gradients/loss/mse_grad/truediv&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_FLOAT\\n        tensor_shape {\\n        }\\n        float_val: 2.0\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/Square_grad/Mul&quot;\\n  op: &quot;Mul&quot;\\n  input: &quot;loss/sub&quot;\\n  input: &quot;gradients/loss/Square_grad/Const&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/Square_grad/Mul_1&quot;\\n  op: &quot;Mul&quot;\\n  input: &quot;gradients/loss/mse_grad/truediv&quot;\\n  input: &quot;gradients/loss/Square_grad/Mul&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/Shape&quot;\\n  op: &quot;Shape&quot;\\n  input: &quot;predictions&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;out_type&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/Shape_1&quot;\\n  op: &quot;Shape&quot;\\n  input: &quot;y&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;out_type&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/BroadcastGradientArgs&quot;\\n  op: &quot;BroadcastGradientArgs&quot;\\n  input: &quot;gradients/loss/sub_grad/Shape&quot;\\n  input: &quot;gradients/loss/sub_grad/Shape_1&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/Sum&quot;\\n  op: &quot;Sum&quot;\\n  input: &quot;gradients/loss/Square_grad/Mul_1&quot;\\n  input: &quot;gradients/loss/sub_grad/BroadcastGradientArgs&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;Tidx&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;keep_dims&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/Reshape&quot;\\n  op: &quot;Reshape&quot;\\n  input: &quot;gradients/loss/sub_grad/Sum&quot;\\n  input: &quot;gradients/loss/sub_grad/Shape&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;Tshape&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/Sum_1&quot;\\n  op: &quot;Sum&quot;\\n  input: &quot;gradients/loss/Square_grad/Mul_1&quot;\\n  input: &quot;gradients/loss/sub_grad/BroadcastGradientArgs:1&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;Tidx&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;keep_dims&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/Neg&quot;\\n  op: &quot;Neg&quot;\\n  input: &quot;gradients/loss/sub_grad/Sum_1&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/Reshape_1&quot;\\n  op: &quot;Reshape&quot;\\n  input: &quot;gradients/loss/sub_grad/Neg&quot;\\n  input: &quot;gradients/loss/sub_grad/Shape_1&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;Tshape&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/tuple/group_deps&quot;\\n  op: &quot;NoOp&quot;\\n  input: &quot;^gradients/loss/sub_grad/Reshape&quot;\\n  input: &quot;^gradients/loss/sub_grad/Reshape_1&quot;\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/tuple/control_dependency&quot;\\n  op: &quot;Identity&quot;\\n  input: &quot;gradients/loss/sub_grad/Reshape&quot;\\n  input: &quot;^gradients/loss/sub_grad/tuple/group_deps&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;_class&quot;\\n    value {\\n      list {\\n        s: &quot;loc:@gradients/loss/sub_grad/Reshape&quot;\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/loss/sub_grad/tuple/control_dependency_1&quot;\\n  op: &quot;Identity&quot;\\n  input: &quot;gradients/loss/sub_grad/Reshape_1&quot;\\n  input: &quot;^gradients/loss/sub_grad/tuple/group_deps&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;_class&quot;\\n    value {\\n      list {\\n        s: &quot;loc:@gradients/loss/sub_grad/Reshape_1&quot;\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/predictions_grad/MatMul&quot;\\n  op: &quot;MatMul&quot;\\n  input: &quot;gradients/loss/sub_grad/tuple/control_dependency&quot;\\n  input: &quot;theta/read&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;transpose_a&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n  attr {\\n    key: &quot;transpose_b&quot;\\n    value {\\n      b: true\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/predictions_grad/MatMul_1&quot;\\n  op: &quot;MatMul&quot;\\n  input: &quot;X&quot;\\n  input: &quot;gradients/loss/sub_grad/tuple/control_dependency&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;transpose_a&quot;\\n    value {\\n      b: true\\n    }\\n  }\\n  attr {\\n    key: &quot;transpose_b&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/predictions_grad/tuple/group_deps&quot;\\n  op: &quot;NoOp&quot;\\n  input: &quot;^gradients/predictions_grad/MatMul&quot;\\n  input: &quot;^gradients/predictions_grad/MatMul_1&quot;\\n}\\nnode {\\n  name: &quot;gradients/predictions_grad/tuple/control_dependency&quot;\\n  op: &quot;Identity&quot;\\n  input: &quot;gradients/predictions_grad/MatMul&quot;\\n  input: &quot;^gradients/predictions_grad/tuple/group_deps&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;_class&quot;\\n    value {\\n      list {\\n        s: &quot;loc:@gradients/predictions_grad/MatMul&quot;\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;gradients/predictions_grad/tuple/control_dependency_1&quot;\\n  op: &quot;Identity&quot;\\n  input: &quot;gradients/predictions_grad/MatMul_1&quot;\\n  input: &quot;^gradients/predictions_grad/tuple/group_deps&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;_class&quot;\\n    value {\\n      list {\\n        s: &quot;loc:@gradients/predictions_grad/MatMul_1&quot;\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;GradientDescent/learning_rate&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_FLOAT\\n        tensor_shape {\\n        }\\n        float_val: 0.009999999776482582\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;GradientDescent/update_theta/ApplyGradientDescent&quot;\\n  op: &quot;ApplyGradientDescent&quot;\\n  input: &quot;theta&quot;\\n  input: &quot;GradientDescent/learning_rate&quot;\\n  input: &quot;gradients/predictions_grad/tuple/control_dependency_1&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;_class&quot;\\n    value {\\n      list {\\n        s: &quot;loc:@theta&quot;\\n      }\\n    }\\n  }\\n  attr {\\n    key: &quot;use_locking&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;GradientDescent&quot;\\n  op: &quot;NoOp&quot;\\n  input: &quot;^GradientDescent/update_theta/ApplyGradientDescent&quot;\\n}\\nnode {\\n  name: &quot;init&quot;\\n  op: &quot;NoOp&quot;\\n  input: &quot;^theta/Assign&quot;\\n}\\nnode {\\n  name: &quot;MSE/tags&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_STRING\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_STRING\\n        tensor_shape {\\n        }\\n        string_val: &quot;MSE&quot;\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;MSE&quot;\\n  op: &quot;ScalarSummary&quot;\\n  input: &quot;MSE/tags&quot;\\n  input: &quot;loss/mse&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;loss_1/sub&quot;\\n  op: &quot;Sub&quot;\\n  input: &quot;predictions&quot;\\n  input: &quot;y&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;loss_1/Square&quot;\\n  op: &quot;Square&quot;\\n  input: &quot;loss_1/sub&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;loss_1/Const&quot;\\n  op: &quot;Const&quot;\\n  attr {\\n    key: &quot;dtype&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;value&quot;\\n    value {\\n      tensor {\\n        dtype: DT_INT32\\n        tensor_shape {\\n          dim {\\n            size: 2\\n          }\\n        }\\n        tensor_content: &quot;\\\\000\\\\000\\\\000\\\\000\\\\001\\\\000\\\\000\\\\000&quot;\\n      }\\n    }\\n  }\\n}\\nnode {\\n  name: &quot;loss_1/mse&quot;\\n  op: &quot;Mean&quot;\\n  input: &quot;loss_1/Square&quot;\\n  input: &quot;loss_1/Const&quot;\\n  attr {\\n    key: &quot;T&quot;\\n    value {\\n      type: DT_FLOAT\\n    }\\n  }\\n  attr {\\n    key: &quot;Tidx&quot;\\n    value {\\n      type: DT_INT32\\n    }\\n  }\\n  attr {\\n    key: &quot;keep_dims&quot;\\n    value {\\n      b: false\\n    }\\n  }\\n}\\n';\n","          }\n","        </script>\n","        <link rel=&quot;import&quot; href=&quot;https://tensorboard.appspot.com/tf-graph-basic.build.html&quot; onload=load()>\n","        <div style=&quot;height:600px&quot;>\n","          <tf-graph-basic id=&quot;graph0.3745401188473625&quot;></tf-graph-basic>\n","        </div>\n","    \"></iframe>\n","    "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"fcidTgt4PJYT","colab_type":"text"},"cell_type":"markdown","source":["## Using TensorBoard"]},{"metadata":{"id":"G8x0hXHTPJYT","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","from datetime import datetime\n","\n","now = datetime.utcnow().strftime(\"%Y%m%d%H%M%S\")\n","root_logdir = \"tf_logs\"\n","logdir = \"{}/run-{}/\".format(root_logdir, now)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"AHSGtftePJYX","colab_type":"code","colab":{}},"cell_type":"code","source":["n_epochs = 1000\n","learning_rate = 0.01\n","\n","X = tf.placeholder(tf.float32, shape=(None, n + 1), name=\"X\")\n","y = tf.placeholder(tf.float32, shape=(None, 1), name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")\n","error = y_pred - y\n","mse = tf.reduce_mean(tf.square(error), name=\"mse\")\n","optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\n","training_op = optimizer.minimize(mse)\n","\n","init = tf.global_variables_initializer()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"uhSmKZiTPJYY","colab_type":"code","colab":{}},"cell_type":"code","source":["mse_summary = tf.summary.scalar('MSE', mse)\n","file_writer = tf.summary.FileWriter(logdir, tf.get_default_graph())"],"execution_count":0,"outputs":[]},{"metadata":{"id":"qyCZGBT-PJYZ","colab_type":"code","colab":{}},"cell_type":"code","source":["n_epochs = 10\n","batch_size = 100\n","n_batches = int(np.ceil(m / batch_size))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"3yz3yaMbPJYa","colab_type":"code","colab":{}},"cell_type":"code","source":["with tf.Session() as sess:                                                        # not shown in the book\n","    sess.run(init)                                                                # not shown\n","\n","    for epoch in range(n_epochs):                                                 # not shown\n","        for batch_index in range(n_batches):\n","            X_batch, y_batch = fetch_batch(epoch, batch_index, batch_size)\n","            if batch_index % 10 == 0:\n","                summary_str = mse_summary.eval(feed_dict={X: X_batch, y: y_batch})\n","                step = epoch * n_batches + batch_index\n","                file_writer.add_summary(summary_str, step)\n","            sess.run(training_op, feed_dict={X: X_batch, y: y_batch})\n","\n","    best_theta = theta.eval()                                                     # not shown"],"execution_count":0,"outputs":[]},{"metadata":{"id":"xkju6VAVPJYc","colab_type":"code","colab":{}},"cell_type":"code","source":["file_writer.close()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"9Ax8Ih0aPJYg","colab_type":"code","outputId":"3bcf98b5-ee4d-4bcf-87e0-747fcdd52126","executionInfo":{"status":"ok","timestamp":1556068075052,"user_tz":240,"elapsed":201039,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"cell_type":"code","source":["best_theta"],"execution_count":118,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 2.0714476 ],\n","       [ 0.8462012 ],\n","       [ 0.11558536],\n","       [-0.26835835],\n","       [ 0.32982785],\n","       [ 0.00608358],\n","       [ 0.07052912],\n","       [-0.8798858 ],\n","       [-0.86342514]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":118}]},{"metadata":{"id":"k5ApMBVVPJYk","colab_type":"text"},"cell_type":"markdown","source":["# Name scopes"]},{"metadata":{"id":"uLTcWiPlPJYl","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","now = datetime.utcnow().strftime(\"%Y%m%d%H%M%S\")\n","root_logdir = \"tf_logs\"\n","logdir = \"{}/run-{}/\".format(root_logdir, now)\n","\n","n_epochs = 1000\n","learning_rate = 0.01\n","\n","X = tf.placeholder(tf.float32, shape=(None, n + 1), name=\"X\")\n","y = tf.placeholder(tf.float32, shape=(None, 1), name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","y_pred = tf.matmul(X, theta, name=\"predictions\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lREwKvTLPJYm","colab_type":"code","colab":{}},"cell_type":"code","source":["with tf.name_scope(\"loss\") as scope:\n","    error = y_pred - y\n","    mse = tf.reduce_mean(tf.square(error), name=\"mse\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lXsNLtapPJYp","colab_type":"code","colab":{}},"cell_type":"code","source":["optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\n","training_op = optimizer.minimize(mse)\n","\n","init = tf.global_variables_initializer()\n","\n","mse_summary = tf.summary.scalar('MSE', mse)\n","file_writer = tf.summary.FileWriter(logdir, tf.get_default_graph())"],"execution_count":0,"outputs":[]},{"metadata":{"id":"4lB-8FBOPJYt","colab_type":"code","outputId":"f3ab3960-a453-4d2b-9fe7-97a95aeef9c1","executionInfo":{"status":"ok","timestamp":1556065908750,"user_tz":240,"elapsed":86859,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":190}},"cell_type":"code","source":["n_epochs = 10\n","batch_size = 100\n","n_batches = int(np.ceil(m / batch_size))\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        for batch_index in range(n_batches):\n","            X_batch, y_batch = fetch_batch(epoch, batch_index, batch_size)\n","            if batch_index % 10 == 0:\n","                summary_str = mse_summary.eval(feed_dict={X: X_batch, y: y_batch})\n","                step = epoch * n_batches + batch_index\n","                file_writer.add_summary(summary_str, step)\n","            sess.run(training_op, feed_dict={X: X_batch, y: y_batch})\n","\n","    best_theta = theta.eval()\n","\n","file_writer.flush()\n","file_writer.close()\n","print(\"Best theta:\")\n","print(best_theta)"],"execution_count":106,"outputs":[{"output_type":"stream","text":["Best theta:\n","[[ 2.0703337 ]\n"," [ 0.8637145 ]\n"," [ 0.12255152]\n"," [-0.31211877]\n"," [ 0.38510376]\n"," [ 0.00434168]\n"," [-0.0123295 ]\n"," [-0.83376896]\n"," [-0.8030471 ]]\n"],"name":"stdout"}]},{"metadata":{"id":"izid3t8EPJYx","colab_type":"code","outputId":"10c145a3-a4da-4aa4-aec8-9bc164793e7d","executionInfo":{"status":"ok","timestamp":1556065908751,"user_tz":240,"elapsed":86848,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["print(error.op.name)"],"execution_count":107,"outputs":[{"output_type":"stream","text":["loss/sub\n"],"name":"stdout"}]},{"metadata":{"id":"Qx4S3RlOPJY0","colab_type":"code","outputId":"1930f01a-ba67-446c-d178-c11d68afd15c","executionInfo":{"status":"ok","timestamp":1556065908751,"user_tz":240,"elapsed":86835,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["print(mse.op.name)"],"execution_count":108,"outputs":[{"output_type":"stream","text":["loss/mse\n"],"name":"stdout"}]},{"metadata":{"id":"oN8T_Wq3PJY5","colab_type":"code","outputId":"f072935f-8866-40dc-e250-9e19d835a836","executionInfo":{"status":"ok","timestamp":1556065908752,"user_tz":240,"elapsed":86824,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":86}},"cell_type":"code","source":["reset_graph()\n","\n","a1 = tf.Variable(0, name=\"a\")      # name == \"a\"\n","a2 = tf.Variable(0, name=\"a\")      # name == \"a_1\"\n","\n","with tf.name_scope(\"param\"):       # name == \"param\"\n","    a3 = tf.Variable(0, name=\"a\")  # name == \"param/a\"\n","\n","with tf.name_scope(\"param\"):       # name == \"param_1\"\n","    a4 = tf.Variable(0, name=\"a\")  # name == \"param_1/a\"\n","\n","for node in (a1, a2, a3, a4):\n","    print(node.op.name)"],"execution_count":109,"outputs":[{"output_type":"stream","text":["a\n","a_1\n","param/a\n","param_1/a\n"],"name":"stdout"}]},{"metadata":{"id":"JiiBE7WEt44g","colab_type":"code","outputId":"39577983-902e-476a-cb5c-cbfcd843146c","executionInfo":{"status":"ok","timestamp":1556065910638,"user_tz":240,"elapsed":88695,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":138}},"cell_type":"code","source":["!ls -l tf_logs/run*"],"execution_count":110,"outputs":[{"output_type":"stream","text":["tf_logs/run-20190424003143:\n","total 28\n","-rw-r--r-- 1 root root 27057 Apr 24 00:31 events.out.tfevents.1556065903.22386b3865fb\n","\n","tf_logs/run-20190424003145:\n","total 28\n","-rw-r--r-- 1 root root 27419 Apr 24 00:31 events.out.tfevents.1556065905.22386b3865fb\n"],"name":"stdout"}]},{"metadata":{"id":"hkPxCPfY1jbE","colab_type":"code","colab":{}},"cell_type":"code","source":["def attrtest(p):\n","    attrtest.name = 'ff';\n","    return p"],"execution_count":0,"outputs":[]},{"metadata":{"id":"UsXHBizE1x9P","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"fiF4eyx_1ozV","colab_type":"code","outputId":"7e7ce05a-0301-4fcf-e20e-3c65a78fc9e3","executionInfo":{"status":"error","timestamp":1556065913073,"user_tz":240,"elapsed":91091,"user":{"displayName":"Ruikang Wang","photoUrl":"https://lh6.googleusercontent.com/-sxpbEWf-1Ng/AAAAAAAAAAI/AAAAAAAAAJ4/3m9qUw3an_4/s64/photo.jpg","userId":"10914323651690992949"}},"colab":{"base_uri":"https://localhost:8080/","height":165}},"cell_type":"code","source":["attrtest(attrtest.name)"],"execution_count":112,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-112-b129d6b50b82>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mattrtest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mattrtest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'function' object has no attribute 'name'"]}]},{"metadata":{"id":"RLi2o4NiPJY7","colab_type":"text"},"cell_type":"markdown","source":["# Modularity"]},{"metadata":{"id":"CIF1mNJ2PJY7","colab_type":"text"},"cell_type":"markdown","source":["An ugly flat code:"]},{"metadata":{"id":"D411dF8mPJY8","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","n_features = 3\n","X = tf.placeholder(tf.float32, shape=(None, n_features), name=\"X\")\n","\n","w1 = tf.Variable(tf.random_normal((n_features, 1)), name=\"weights1\")\n","w2 = tf.Variable(tf.random_normal((n_features, 1)), name=\"weights2\")\n","b1 = tf.Variable(0.0, name=\"bias1\")\n","b2 = tf.Variable(0.0, name=\"bias2\")\n","\n","z1 = tf.add(tf.matmul(X, w1), b1, name=\"z1\")\n","z2 = tf.add(tf.matmul(X, w2), b2, name=\"z2\")\n","\n","relu1 = tf.maximum(z1, 0., name=\"relu1\")\n","# relu2 = tf.maximum(z1, 0., name=\"relu2\")  # Oops, cut&paste error! Did you spot it?\n","relu2 = tf.maximum(z2, 0., name=\"relu2\")  # Oops, cut&paste error! Did you spot it?\n","\n","output = tf.add(relu1, relu2, name=\"output\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"fo76attVPJY9","colab_type":"text"},"cell_type":"markdown","source":["Much better, using a function to build the ReLUs:"]},{"metadata":{"id":"W_fBiojBPJY_","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","def relu(X):\n","    w_shape = (int(X.get_shape()[1]), 1)\n","    w = tf.Variable(tf.random_normal(w_shape), name=\"weights\")\n","    b = tf.Variable(0.0, name=\"bias\")\n","    z = tf.add(tf.matmul(X, w), b, name=\"z\")\n","    return tf.maximum(z, 0., name=\"relu\")\n","\n","n_features = 3\n","X = tf.placeholder(tf.float32, shape=(None, n_features), name=\"X\")\n","relus = [relu(X) for i in range(5)]\n","output = tf.add_n(relus, name=\"output\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"3nAWlCuPPJZA","colab_type":"code","colab":{}},"cell_type":"code","source":["file_writer = tf.summary.FileWriter(\"logs/relu1\", tf.get_default_graph())"],"execution_count":0,"outputs":[]},{"metadata":{"id":"SImKjVT3PJZD","colab_type":"text"},"cell_type":"markdown","source":["Even better using name scopes:"]},{"metadata":{"id":"ypWqWv2kPJZE","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","def relu(X):\n","    with tf.name_scope(\"relu\"):\n","        w_shape = (int(X.get_shape()[1]), 1)                          # not shown in the book\n","        w = tf.Variable(tf.random_normal(w_shape), name=\"weights\")    # not shown\n","        b = tf.Variable(0.0, name=\"bias\")                             # not shown\n","        z = tf.add(tf.matmul(X, w), b, name=\"z\")                      # not shown\n","        return tf.maximum(z, 0., name=\"max\")                          # not shown"],"execution_count":0,"outputs":[]},{"metadata":{"id":"hQOOHr-mPJZH","colab_type":"code","colab":{}},"cell_type":"code","source":["n_features = 3\n","X = tf.placeholder(tf.float32, shape=(None, n_features), name=\"X\")\n","relus = [relu(X) for i in range(5)]\n","output = tf.add_n(relus, name=\"output\")\n","\n","file_writer = tf.summary.FileWriter(\"logs/relu2\", tf.get_default_graph())\n","file_writer.close()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"s93oJnvWPJZJ","colab_type":"text"},"cell_type":"markdown","source":["## Sharing Variables"]},{"metadata":{"id":"bHcVu4LxPJZJ","colab_type":"text"},"cell_type":"markdown","source":["Sharing a `threshold` variable the classic way, by defining it outside of the `relu()` function then passing it as a parameter:"]},{"metadata":{"id":"WW3rfsKkPJZK","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","def relu(X, threshold):\n","    with tf.name_scope(\"relu\"):\n","        w_shape = (int(X.get_shape()[1]), 1)                        # not shown in the book\n","        w = tf.Variable(tf.random_normal(w_shape), name=\"weights\")  # not shown\n","        b = tf.Variable(0.0, name=\"bias\")                           # not shown\n","        z = tf.add(tf.matmul(X, w), b, name=\"z\")                    # not shown\n","        return tf.maximum(z, threshold, name=\"max\")\n","\n","threshold = tf.Variable(0.0, name=\"threshold\")\n","X = tf.placeholder(tf.float32, shape=(None, n_features), name=\"X\")\n","relus = [relu(X, threshold) for i in range(5)]\n","output = tf.add_n(relus, name=\"output\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"s-tA-c64PJZL","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","def relu(X):\n","    with tf.name_scope(\"relu\"):\n","        if not hasattr(relu, \"threshold\"):\n","            relu.threshold = tf.Variable(0.0, name=\"threshold\")\n","        w_shape = int(X.get_shape()[1]), 1                          # not shown in the book\n","        w = tf.Variable(tf.random_normal(w_shape), name=\"weights\")  # not shown\n","        b = tf.Variable(0.0, name=\"bias\")                           # not shown\n","        z = tf.add(tf.matmul(X, w), b, name=\"z\")                    # not shown\n","        return tf.maximum(z, relu.threshold, name=\"max\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"t040MlOBPJZN","colab_type":"code","colab":{}},"cell_type":"code","source":["X = tf.placeholder(tf.float32, shape=(None, n_features), name=\"X\")\n","relus = [relu(X) for i in range(5)]\n","output = tf.add_n(relus, name=\"output\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"KaA5Px7KPJZO","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","with tf.variable_scope(\"relu\"):\n","    threshold = tf.get_variable(\"threshold\", shape=(),\n","                                initializer=tf.constant_initializer(0.0))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"UNedNE6fPJZP","colab_type":"code","colab":{}},"cell_type":"code","source":["with tf.variable_scope(\"relu\", reuse=True):\n","    threshold = tf.get_variable(\"threshold\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lx-ZYK2HPJZR","colab_type":"code","colab":{}},"cell_type":"code","source":["with tf.variable_scope(\"relu\") as scope:\n","    scope.reuse_variables()\n","    threshold = tf.get_variable(\"threshold\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"6A-1bhRDPJZT","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","def relu(X):\n","    with tf.variable_scope(\"relu\", reuse=True):\n","        threshold = tf.get_variable(\"threshold\")\n","        w_shape = int(X.get_shape()[1]), 1                          # not shown\n","        w = tf.Variable(tf.random_normal(w_shape), name=\"weights\")  # not shown\n","        b = tf.Variable(0.0, name=\"bias\")                           # not shown\n","        z = tf.add(tf.matmul(X, w), b, name=\"z\")                    # not shown\n","        return tf.maximum(z, threshold, name=\"max\")\n","\n","X = tf.placeholder(tf.float32, shape=(None, n_features), name=\"X\")\n","with tf.variable_scope(\"relu\"):\n","    threshold = tf.get_variable(\"threshold\", shape=(),\n","                                initializer=tf.constant_initializer(0.0))\n","relus = [relu(X) for relu_index in range(5)]\n","output = tf.add_n(relus, name=\"output\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"AuWmWh25PJZV","colab_type":"code","colab":{}},"cell_type":"code","source":["file_writer = tf.summary.FileWriter(\"logs/relu6\", tf.get_default_graph())\n","file_writer.close()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"AWpdSwRuPJZb","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","def relu(X):\n","    with tf.variable_scope(\"relu\"):\n","        threshold = tf.get_variable(\"threshold\", shape=(), initializer=tf.constant_initializer(0.0))\n","        w_shape = (int(X.get_shape()[1]), 1)\n","        w = tf.Variable(tf.random_normal(w_shape), name=\"weights\")\n","        b = tf.Variable(0.0, name=\"bias\")\n","        z = tf.add(tf.matmul(X, w), b, name=\"z\")\n","        return tf.maximum(z, threshold, name=\"max\")\n","\n","X = tf.placeholder(tf.float32, shape=(None, n_features), name=\"X\")\n","with tf.variable_scope(\"\", default_name=\"\") as scope:\n","    first_relu = relu(X)     # create the shared variable\n","    scope.reuse_variables()  # then reuse it\n","    relus = [first_relu] + [relu(X) for i in range(4)]\n","output = tf.add_n(relus, name=\"output\")\n","\n","file_writer = tf.summary.FileWriter(\"logs/relu8\", tf.get_default_graph())\n","file_writer.close()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"T2onfXK8PJZc","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","def relu(X):\n","    threshold = tf.get_variable(\"threshold\", shape=(),\n","                                initializer=tf.constant_initializer(0.0))\n","    w_shape = (int(X.get_shape()[1]), 1)                        # not shown in the book\n","    w = tf.Variable(tf.random_normal(w_shape), name=\"weights\")  # not shown\n","    b = tf.Variable(0.0, name=\"bias\")                           # not shown\n","    z = tf.add(tf.matmul(X, w), b, name=\"z\")                    # not shown\n","    return tf.maximum(z, threshold, name=\"max\")\n","\n","X = tf.placeholder(tf.float32, shape=(None, n_features), name=\"X\")\n","relus = []\n","for relu_index in range(5):\n","    with tf.variable_scope(\"relu\", reuse=(relu_index >= 1)) as scope:\n","        relus.append(relu(X))\n","output = tf.add_n(relus, name=\"output\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"wgQTCg_mPJZe","colab_type":"code","colab":{}},"cell_type":"code","source":["file_writer = tf.summary.FileWriter(\"logs/relu9\", tf.get_default_graph())\n","file_writer.close()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"_OS9G0uRPJZg","colab_type":"text"},"cell_type":"markdown","source":["# Extra material"]},{"metadata":{"id":"QhANy-alPJZg","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","with tf.variable_scope(\"my_scope\"):\n","    x0 = tf.get_variable(\"x\", shape=(), initializer=tf.constant_initializer(0.))\n","    x1 = tf.Variable(0., name=\"x\")\n","    x2 = tf.Variable(0., name=\"x\")\n","\n","with tf.variable_scope(\"my_scope\", reuse=True):\n","    x3 = tf.get_variable(\"x\")\n","    x4 = tf.Variable(0., name=\"x\")\n","\n","with tf.variable_scope(\"\", default_name=\"\", reuse=True):\n","    x5 = tf.get_variable(\"my_scope/x\")\n","\n","print(\"x0:\", x0.op.name)\n","print(\"x1:\", x1.op.name)\n","print(\"x2:\", x2.op.name)\n","print(\"x3:\", x3.op.name)\n","print(\"x4:\", x4.op.name)\n","print(\"x5:\", x5.op.name)\n","print(x0 is x3 and x3 is x5)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"LRm6JzTLPJZl","colab_type":"text"},"cell_type":"markdown","source":["The first `variable_scope()` block first creates the shared variable `x0`, named `my_scope/x`. For all operations other than shared variables (including non-shared variables), the variable scope acts like a regular name scope, which is why the two variables `x1` and `x2` have a name with a prefix `my_scope/`. Note however that TensorFlow makes their names unique by adding an index: `my_scope/x_1` and `my_scope/x_2`.\n","\n","The second `variable_scope()` block reuses the shared variables in scope `my_scope`, which is why `x0 is x3`. Once again, for all operations other than shared variables it acts as a named scope, and since it's a separate block from the first one, the name of the scope is made unique by TensorFlow (`my_scope_1`) and thus the variable `x4` is named `my_scope_1/x`.\n","\n","The third block shows another way to get a handle on the shared variable `my_scope/x` by creating a `variable_scope()` at the root scope (whose name is an empty string), then calling `get_variable()` with the full name of the shared variable (i.e. `\"my_scope/x\"`)."]},{"metadata":{"id":"bzcLQ240PJZm","colab_type":"text"},"cell_type":"markdown","source":["## Strings"]},{"metadata":{"id":"Xzft2MpXPJZm","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()\n","\n","text = np.array(\"Do you want some café?\".split())\n","text_tensor = tf.constant(text)\n","\n","with tf.Session() as sess:\n","    print(text_tensor.eval())"],"execution_count":0,"outputs":[]},{"metadata":{"id":"EaB0v7BGPJZt","colab_type":"text"},"cell_type":"markdown","source":["## Autodiff"]},{"metadata":{"id":"1mDt3WQdPJZu","colab_type":"text"},"cell_type":"markdown","source":["Note: the autodiff content was moved to the [extra_autodiff.ipynb](extra_autodiff.ipynb) notebook."]},{"metadata":{"id":"o8v8CMqNPJZw","colab_type":"text"},"cell_type":"markdown","source":["# Exercise solutions"]},{"metadata":{"id":"8jZ5MeqSPJZw","colab_type":"text"},"cell_type":"markdown","source":["## 1. to 11."]},{"metadata":{"collapsed":true,"id":"aCiCrcnkPJZx","colab_type":"text"},"cell_type":"markdown","source":["See appendix A."]},{"metadata":{"id":"Iv_ZsMXkPJZx","colab_type":"text"},"cell_type":"markdown","source":["## 12. Logistic Regression with Mini-Batch Gradient Descent using TensorFlow"]},{"metadata":{"id":"LaZgm3tVPJZy","colab_type":"text"},"cell_type":"markdown","source":["First, let's create the moons dataset using Scikit-Learn's `make_moons()` function:"]},{"metadata":{"id":"byV8GrItPJZz","colab_type":"code","colab":{}},"cell_type":"code","source":["from sklearn.datasets import make_moons\n","\n","m = 1000\n","X_moons, y_moons = make_moons(m, noise=0.1, random_state=42)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"GGZC6u-CPJZ0","colab_type":"text"},"cell_type":"markdown","source":["Let's take a peek at the dataset:"]},{"metadata":{"id":"SmJIx7L7PJZ1","colab_type":"code","colab":{}},"cell_type":"code","source":["plt.plot(X_moons[y_moons == 1, 0], X_moons[y_moons == 1, 1], 'go', label=\"Positive\")\n","plt.plot(X_moons[y_moons == 0, 0], X_moons[y_moons == 0, 1], 'r^', label=\"Negative\")\n","plt.legend()\n","plt.show()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"KiNfAfrTPJZ4","colab_type":"text"},"cell_type":"markdown","source":["We must not forget to add an extra bias feature ($x_0 = 1$) to every instance. For this, we just need to add a column full of 1s on the left of the input matrix $\\mathbf{X}$:"]},{"metadata":{"id":"AoLKFo7VPJZ6","colab_type":"code","colab":{}},"cell_type":"code","source":["X_moons_with_bias = np.c_[np.ones((m, 1)), X_moons]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ixvL767JPJZ7","colab_type":"text"},"cell_type":"markdown","source":["Let's check:"]},{"metadata":{"id":"hmAgxUkHPJZ8","colab_type":"code","colab":{}},"cell_type":"code","source":["X_moons_with_bias[:5]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Ys_jIDRLPJZ-","colab_type":"text"},"cell_type":"markdown","source":["Looks good. Now let's reshape `y_train` to make it a column vector (i.e. a 2D array with a single column):"]},{"metadata":{"id":"E1Mv3n9sPJZ-","colab_type":"code","colab":{}},"cell_type":"code","source":["y_moons_column_vector = y_moons.reshape(-1, 1)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"anIBAiupPJZ_","colab_type":"text"},"cell_type":"markdown","source":["Now let's split the data into a training set and a test set:"]},{"metadata":{"id":"MhGIAMluPJaA","colab_type":"code","colab":{}},"cell_type":"code","source":["test_ratio = 0.2\n","test_size = int(m * test_ratio)\n","X_train = X_moons_with_bias[:-test_size]\n","X_test = X_moons_with_bias[-test_size:]\n","y_train = y_moons_column_vector[:-test_size]\n","y_test = y_moons_column_vector[-test_size:]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"uTTl6G4JPJaC","colab_type":"text"},"cell_type":"markdown","source":["Ok, now let's create a small function to generate training batches. In this implementation we will just pick random instances from the training set for each batch. This means that a single batch may contain the same instance multiple times, and also a single epoch may not cover all the training instances (in fact it will generally cover only about two thirds of the instances). However, in practice this is not an issue and it simplifies the code:"]},{"metadata":{"id":"e4AiBza9PJaC","colab_type":"code","colab":{}},"cell_type":"code","source":["def random_batch(X_train, y_train, batch_size):\n","    rnd_indices = np.random.randint(0, len(X_train), batch_size)\n","    X_batch = X_train[rnd_indices]\n","    y_batch = y_train[rnd_indices]\n","    return X_batch, y_batch"],"execution_count":0,"outputs":[]},{"metadata":{"id":"gUiPL6MaPJaG","colab_type":"text"},"cell_type":"markdown","source":["Let's look at a small batch:"]},{"metadata":{"id":"Ik9_bQwOPJaH","colab_type":"code","colab":{}},"cell_type":"code","source":["X_batch, y_batch = random_batch(X_train, y_train, 5)\n","X_batch"],"execution_count":0,"outputs":[]},{"metadata":{"id":"AWebCj0ePJaJ","colab_type":"code","colab":{}},"cell_type":"code","source":["y_batch"],"execution_count":0,"outputs":[]},{"metadata":{"id":"gWayAfn_PJaL","colab_type":"text"},"cell_type":"markdown","source":["Great! Now that the data is ready to be fed to the model, we need to build that model. Let's start with a simple implementation, then we will add all the bells and whistles."]},{"metadata":{"id":"9ErGLxWhPJaL","colab_type":"text"},"cell_type":"markdown","source":["First let's reset the default graph."]},{"metadata":{"id":"TaUL3_rKPJaM","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"-pcxOgHaPJaP","colab_type":"text"},"cell_type":"markdown","source":["The _moons_ dataset has two input features, since each instance is a point on a plane (i.e., 2-Dimensional):"]},{"metadata":{"id":"sveWc1dIPJaQ","colab_type":"code","colab":{}},"cell_type":"code","source":["n_inputs = 2"],"execution_count":0,"outputs":[]},{"metadata":{"id":"tgq7wYqnPJaS","colab_type":"text"},"cell_type":"markdown","source":["Now let's build the Logistic Regression model. As we saw in chapter 4, this model first computes a weighted sum of the inputs (just like the Linear Regression model), and then it applies the sigmoid function to the result, which gives us the estimated probability for the positive class:\n","\n","$\\hat{p} = h_\\boldsymbol{\\theta}(\\mathbf{x}) = \\sigma(\\boldsymbol{\\theta}^T \\mathbf{x})$\n"]},{"metadata":{"id":"n8OhLeV3PJaS","colab_type":"text"},"cell_type":"markdown","source":["Recall that $\\boldsymbol{\\theta}$ is the parameter vector, containing the bias term $\\theta_0$ and the weights $\\theta_1, \\theta_2, \\dots, \\theta_n$. The input vector $\\mathbf{x}$ contains a constant term $x_0 = 1$, as well as all the input features $x_1, x_2, \\dots, x_n$.\n","\n","Since we want to be able to make predictions for multiple instances at a time, we will use an input matrix $\\mathbf{X}$ rather than a single input vector. The $i^{th}$ row will contain the transpose of the $i^{th}$ input vector $(\\mathbf{x}^{(i)})^T$. It is then possible to estimate the probability that each instance belongs to the positive class using the following equation:\n","\n","$ \\hat{\\mathbf{p}} = \\sigma(\\mathbf{X} \\boldsymbol{\\theta})$\n","\n","That's all we need to build the model:"]},{"metadata":{"id":"nK_EvV1nPJaS","colab_type":"code","colab":{}},"cell_type":"code","source":["X = tf.placeholder(tf.float32, shape=(None, n_inputs + 1), name=\"X\")\n","y = tf.placeholder(tf.float32, shape=(None, 1), name=\"y\")\n","theta = tf.Variable(tf.random_uniform([n_inputs + 1, 1], -1.0, 1.0, seed=42), name=\"theta\")\n","logits = tf.matmul(X, theta, name=\"logits\")\n","y_proba = 1 / (1 + tf.exp(-logits))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"qOQB30ukPJaV","colab_type":"text"},"cell_type":"markdown","source":["In fact, TensorFlow has a nice function `tf.sigmoid()` that we can use to simplify the last line of the previous code:"]},{"metadata":{"id":"EDOqs1CDPJaW","colab_type":"code","colab":{}},"cell_type":"code","source":["y_proba = tf.sigmoid(logits)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"CGMsuLrkPJaX","colab_type":"text"},"cell_type":"markdown","source":["As we saw in chapter 4, the log loss is a good cost function to use for Logistic Regression:\n","\n","$J(\\boldsymbol{\\theta}) = -\\dfrac{1}{m} \\sum\\limits_{i=1}^{m}{\\left[ y^{(i)} \\log\\left(\\hat{p}^{(i)}\\right) + (1 - y^{(i)}) \\log\\left(1 - \\hat{p}^{(i)}\\right)\\right]}$\n","\n","One option is to implement it ourselves:"]},{"metadata":{"id":"Fz2UZNeCPJaX","colab_type":"code","colab":{}},"cell_type":"code","source":["epsilon = 1e-7  # to avoid an overflow when computing the log\n","loss = -tf.reduce_mean(y * tf.log(y_proba + epsilon) + (1 - y) * tf.log(1 - y_proba + epsilon))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"TRlQkc0DPJaf","colab_type":"text"},"cell_type":"markdown","source":["But we might as well use TensorFlow's `tf.losses.log_loss()` function:"]},{"metadata":{"id":"0g-0URiJPJai","colab_type":"code","colab":{}},"cell_type":"code","source":["loss = tf.losses.log_loss(y, y_proba)  # uses epsilon = 1e-7 by default"],"execution_count":0,"outputs":[]},{"metadata":{"id":"6HslnACaPJak","colab_type":"text"},"cell_type":"markdown","source":["The rest is pretty standard: let's create the optimizer and tell it to minimize the cost function:"]},{"metadata":{"id":"xKeI8OTaPJak","colab_type":"code","colab":{}},"cell_type":"code","source":["learning_rate = 0.01\n","optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\n","training_op = optimizer.minimize(loss)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"BJF33khcPJao","colab_type":"text"},"cell_type":"markdown","source":["All we need now (in this minimal version) is the variable initializer:"]},{"metadata":{"id":"-gkL0Ge0PJao","colab_type":"code","colab":{}},"cell_type":"code","source":["init = tf.global_variables_initializer()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Zk_U21TRPJar","colab_type":"text"},"cell_type":"markdown","source":["And we are ready to train the model and use it for predictions!"]},{"metadata":{"id":"pJINj6eRPJar","colab_type":"text"},"cell_type":"markdown","source":["There's really nothing special about this code, it's virtually the same as the one we used earlier for Linear Regression:"]},{"metadata":{"id":"A4cbO3nLPJar","colab_type":"code","colab":{}},"cell_type":"code","source":["n_epochs = 1000\n","batch_size = 50\n","n_batches = int(np.ceil(m / batch_size))\n","\n","with tf.Session() as sess:\n","    sess.run(init)\n","\n","    for epoch in range(n_epochs):\n","        for batch_index in range(n_batches):\n","            X_batch, y_batch = random_batch(X_train, y_train, batch_size)\n","            sess.run(training_op, feed_dict={X: X_batch, y: y_batch})\n","        loss_val = loss.eval({X: X_test, y: y_test})\n","        if epoch % 100 == 0:\n","            print(\"Epoch:\", epoch, \"\\tLoss:\", loss_val)\n","\n","    y_proba_val = y_proba.eval(feed_dict={X: X_test, y: y_test})"],"execution_count":0,"outputs":[]},{"metadata":{"id":"sq-4tRD3PJat","colab_type":"text"},"cell_type":"markdown","source":["Note: we don't use the epoch number when generating batches, so we could just have a single `for` loop rather than 2 nested `for` loops, but it's convenient to think of training time in terms of number of epochs (i.e., roughly the number of times the algorithm went through the training set)."]},{"metadata":{"id":"fqBjDh9GPJau","colab_type":"text"},"cell_type":"markdown","source":["For each instance in the test set, `y_proba_val` contains the estimated probability that it belongs to the positive class, according to the model. For example, here are the first 5 estimated probabilities:"]},{"metadata":{"id":"a7aSbE0wPJau","colab_type":"code","colab":{}},"cell_type":"code","source":["y_proba_val[:5]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Nc4NfXdcPJav","colab_type":"text"},"cell_type":"markdown","source":["To classify each instance, we can go for maximum likelihood: classify as positive any instance whose estimated probability is greater or equal to 0.5:"]},{"metadata":{"id":"wrp3diLEPJav","colab_type":"code","colab":{}},"cell_type":"code","source":["y_pred = (y_proba_val >= 0.5)\n","y_pred[:5]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"4F0PpxdnPJaw","colab_type":"text"},"cell_type":"markdown","source":["Depending on the use case, you may want to choose a different threshold than 0.5: make it higher if you want high precision (but lower recall), and make it lower if you want high recall (but lower precision). See chapter 3 for more details."]},{"metadata":{"id":"V8y0-ArLPJaw","colab_type":"text"},"cell_type":"markdown","source":["Let's compute the model's precision and recall:"]},{"metadata":{"id":"d_nHo84WPJaw","colab_type":"code","colab":{}},"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score\n","\n","precision_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"1dOT7uFjPJay","colab_type":"code","colab":{}},"cell_type":"code","source":["recall_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"446hlABgPJa5","colab_type":"text"},"cell_type":"markdown","source":["Let's plot these predictions to see what they look like:"]},{"metadata":{"id":"ei0RvQwkPJa5","colab_type":"code","colab":{}},"cell_type":"code","source":["y_pred_idx = y_pred.reshape(-1) # a 1D array rather than a column vector\n","plt.plot(X_test[y_pred_idx, 1], X_test[y_pred_idx, 2], 'go', label=\"Positive\")\n","plt.plot(X_test[~y_pred_idx, 1], X_test[~y_pred_idx, 2], 'r^', label=\"Negative\")\n","plt.legend()\n","plt.show()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PcXh9ssRPJa7","colab_type":"text"},"cell_type":"markdown","source":["Well, that looks pretty bad, doesn't it? But let's not forget that the Logistic Regression model has a linear decision boundary, so this is actually close to the best we can do with this model (unless we add more features, as we will show in a second)."]},{"metadata":{"id":"w2KqPzsNPJa8","colab_type":"text"},"cell_type":"markdown","source":["Now let's start over, but this time we will add all the bells and whistles, as listed in the exercise:\n","* Define the graph within a `logistic_regression()` function that can be reused easily.\n","* Save checkpoints using a `Saver` at regular intervals during training, and save the final model at the end of training.\n","* Restore the last checkpoint upon startup if training was interrupted.\n","* Define the graph using nice scopes so the graph looks good in TensorBoard.\n","* Add summaries to visualize the learning curves in TensorBoard.\n","* Try tweaking some hyperparameters such as the learning rate or the mini-batch size and look at the shape of the learning curve."]},{"metadata":{"id":"2_Pg_TPYPJa9","colab_type":"text"},"cell_type":"markdown","source":["Before we start, we will add 4 more features to the inputs: ${x_1}^2$, ${x_2}^2$, ${x_1}^3$ and ${x_2}^3$. This was not part of the exercise, but it will demonstrate how adding features can improve the model. We will do this manually, but you could also add them using `sklearn.preprocessing.PolynomialFeatures`."]},{"metadata":{"id":"IkJSBRbbPJa-","colab_type":"code","colab":{}},"cell_type":"code","source":["X_train_enhanced = np.c_[X_train,\n","                         np.square(X_train[:, 1]),\n","                         np.square(X_train[:, 2]),\n","                         X_train[:, 1] ** 3,\n","                         X_train[:, 2] ** 3]\n","X_test_enhanced = np.c_[X_test,\n","                        np.square(X_test[:, 1]),\n","                        np.square(X_test[:, 2]),\n","                        X_test[:, 1] ** 3,\n","                        X_test[:, 2] ** 3]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"MXR6YBFzPJbC","colab_type":"text"},"cell_type":"markdown","source":["This is what the \"enhanced\" training set looks like:"]},{"metadata":{"id":"XPDeqzvTPJbC","colab_type":"code","colab":{}},"cell_type":"code","source":["X_train_enhanced[:5]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"P4sErz9EPJbL","colab_type":"text"},"cell_type":"markdown","source":["Ok, next let's reset the default graph:"]},{"metadata":{"id":"JzoI7UFlPJbL","colab_type":"code","colab":{}},"cell_type":"code","source":["reset_graph()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"L_834P14PJbN","colab_type":"text"},"cell_type":"markdown","source":["Now let's define the `logistic_regression()` function to create the graph. We will leave out the definition of the inputs `X` and the targets `y`. We could include them here, but leaving them out will make it easier to use this function in a wide range of use cases (e.g. perhaps we will want to add some preprocessing steps for the inputs before we feed them to the Logistic Regression model)."]},{"metadata":{"id":"p4KdinW_PJbN","colab_type":"code","colab":{}},"cell_type":"code","source":["def logistic_regression(X, y, initializer=None, seed=42, learning_rate=0.01):\n","    n_inputs_including_bias = int(X.get_shape()[1])\n","    with tf.name_scope(\"logistic_regression\"):\n","        with tf.name_scope(\"model\"):\n","            if initializer is None:\n","                initializer = tf.random_uniform([n_inputs_including_bias, 1], -1.0, 1.0, seed=seed)\n","            theta = tf.Variable(initializer, name=\"theta\")\n","            logits = tf.matmul(X, theta, name=\"logits\")\n","            y_proba = tf.sigmoid(logits)\n","        with tf.name_scope(\"train\"):\n","            loss = tf.losses.log_loss(y, y_proba, scope=\"loss\")\n","            optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\n","            training_op = optimizer.minimize(loss)\n","            loss_summary = tf.summary.scalar('log_loss', loss)\n","        with tf.name_scope(\"init\"):\n","            init = tf.global_variables_initializer()\n","        with tf.name_scope(\"save\"):\n","            saver = tf.train.Saver()\n","    return y_proba, loss, training_op, loss_summary, init, saver"],"execution_count":0,"outputs":[]},{"metadata":{"id":"nRqVQITyPJbP","colab_type":"text"},"cell_type":"markdown","source":["Let's create a little function to get the name of the log directory to save the summaries for Tensorboard:"]},{"metadata":{"id":"3Kx4VhbfPJbP","colab_type":"code","colab":{}},"cell_type":"code","source":["from datetime import datetime\n","\n","def log_dir(prefix=\"\"):\n","    now = datetime.utcnow().strftime(\"%Y%m%d%H%M%S\")\n","    root_logdir = \"tf_logs\"\n","    if prefix:\n","        prefix += \"-\"\n","    name = prefix + \"run-\" + now\n","    return \"{}/{}/\".format(root_logdir, name)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"dBorAgEfPJbR","colab_type":"text"},"cell_type":"markdown","source":["Next, let's create the graph, using the `logistic_regression()` function. We will also create the `FileWriter` to save the summaries to the log directory for Tensorboard:"]},{"metadata":{"id":"LSmZriChPJbS","colab_type":"code","colab":{}},"cell_type":"code","source":["n_inputs = 2 + 4\n","logdir = log_dir(\"logreg\")\n","\n","X = tf.placeholder(tf.float32, shape=(None, n_inputs + 1), name=\"X\")\n","y = tf.placeholder(tf.float32, shape=(None, 1), name=\"y\")\n","\n","y_proba, loss, training_op, loss_summary, init, saver = logistic_regression(X, y)\n","\n","file_writer = tf.summary.FileWriter(logdir, tf.get_default_graph())"],"execution_count":0,"outputs":[]},{"metadata":{"id":"fTHKegg2PJbV","colab_type":"text"},"cell_type":"markdown","source":["At last we can train the model! We will start by checking whether a previous training session was interrupted, and if so we will load the checkpoint and continue training from the epoch number we saved. In this example we just save the epoch number to a separate file, but in chapter 11 we will see how to store the training step directly as part of the model, using a non-trainable variable called `global_step` that we pass to the optimizer's `minimize()` method.\n","\n","You can try interrupting training to verify that it does indeed restore the last checkpoint when you start it again."]},{"metadata":{"id":"DE6NHaI9PJbW","colab_type":"code","colab":{}},"cell_type":"code","source":["n_epochs = 10001\n","batch_size = 50\n","n_batches = int(np.ceil(m / batch_size))\n","\n","checkpoint_path = \"/tmp/my_logreg_model.ckpt\"\n","checkpoint_epoch_path = checkpoint_path + \".epoch\"\n","final_model_path = \"./my_logreg_model\"\n","\n","with tf.Session() as sess:\n","    if os.path.isfile(checkpoint_epoch_path):\n","        # if the checkpoint file exists, restore the model and load the epoch number\n","        with open(checkpoint_epoch_path, \"rb\") as f:\n","            start_epoch = int(f.read())\n","        print(\"Training was interrupted. Continuing at epoch\", start_epoch)\n","        saver.restore(sess, checkpoint_path)\n","    else:\n","        start_epoch = 0\n","        sess.run(init)\n","\n","    for epoch in range(start_epoch, n_epochs):\n","        for batch_index in range(n_batches):\n","            X_batch, y_batch = random_batch(X_train_enhanced, y_train, batch_size)\n","            sess.run(training_op, feed_dict={X: X_batch, y: y_batch})\n","        loss_val, summary_str = sess.run([loss, loss_summary], feed_dict={X: X_test_enhanced, y: y_test})\n","        file_writer.add_summary(summary_str, epoch)\n","        if epoch % 500 == 0:\n","            print(\"Epoch:\", epoch, \"\\tLoss:\", loss_val)\n","            saver.save(sess, checkpoint_path)\n","            with open(checkpoint_epoch_path, \"wb\") as f:\n","                f.write(b\"%d\" % (epoch + 1))\n","\n","    saver.save(sess, final_model_path)\n","    y_proba_val = y_proba.eval(feed_dict={X: X_test_enhanced, y: y_test})\n","    os.remove(checkpoint_epoch_path)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"8swZj35QPJbZ","colab_type":"text"},"cell_type":"markdown","source":["Once again, we can make predictions by just classifying as positive all the instances whose estimated probability is greater or equal to 0.5:"]},{"metadata":{"id":"KoIcohkWPJbZ","colab_type":"code","colab":{}},"cell_type":"code","source":["y_pred = (y_proba_val >= 0.5)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"BWbJxx_5PJbb","colab_type":"code","colab":{}},"cell_type":"code","source":["precision_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Qfm-fKhwPJbd","colab_type":"code","colab":{}},"cell_type":"code","source":["recall_score(y_test, y_pred)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"3ORTzbavPJbf","colab_type":"code","colab":{}},"cell_type":"code","source":["y_pred_idx = y_pred.reshape(-1) # a 1D array rather than a column vector\n","plt.plot(X_test[y_pred_idx, 1], X_test[y_pred_idx, 2], 'go', label=\"Positive\")\n","plt.plot(X_test[~y_pred_idx, 1], X_test[~y_pred_idx, 2], 'r^', label=\"Negative\")\n","plt.legend()\n","plt.show()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"2KTheZXaPJbg","colab_type":"text"},"cell_type":"markdown","source":["Now that's much, much better! Apparently the new features really helped a lot."]},{"metadata":{"id":"i11lTNuRPJbg","colab_type":"text"},"cell_type":"markdown","source":["Try starting the tensorboard server, find the latest run and look at the learning curve (i.e., how the loss evaluated on the test set evolves as a function of the epoch number):\n","\n","```\n","$ tensorboard --logdir=tf_logs\n","```"]},{"metadata":{"id":"KxmXqkgQPJbh","colab_type":"text"},"cell_type":"markdown","source":["Now you can play around with the hyperparameters (e.g. the `batch_size` or the `learning_rate`) and run training again and again, comparing the learning curves. You can even automate this process by implementing grid search or randomized search. Below is a simple implementation of a randomized search on both the batch size and the learning rate. For the sake of simplicity, the checkpoint mechanism was removed."]},{"metadata":{"id":"rj_05M4mPJbh","colab_type":"code","colab":{}},"cell_type":"code","source":["from scipy.stats import reciprocal\n","\n","n_search_iterations = 10\n","\n","for search_iteration in range(n_search_iterations):\n","    batch_size = np.random.randint(1, 100)\n","    learning_rate = reciprocal(0.0001, 0.1).rvs(random_state=search_iteration)\n","\n","    n_inputs = 2 + 4\n","    logdir = log_dir(\"logreg\")\n","    \n","    print(\"Iteration\", search_iteration)\n","    print(\"  logdir:\", logdir)\n","    print(\"  batch size:\", batch_size)\n","    print(\"  learning_rate:\", learning_rate)\n","    print(\"  training: \", end=\"\")\n","\n","    reset_graph()\n","\n","    X = tf.placeholder(tf.float32, shape=(None, n_inputs + 1), name=\"X\")\n","    y = tf.placeholder(tf.float32, shape=(None, 1), name=\"y\")\n","\n","    y_proba, loss, training_op, loss_summary, init, saver = logistic_regression(\n","        X, y, learning_rate=learning_rate)\n","\n","    file_writer = tf.summary.FileWriter(logdir, tf.get_default_graph())\n","\n","    n_epochs = 10001\n","    n_batches = int(np.ceil(m / batch_size))\n","\n","    final_model_path = \"./my_logreg_model_%d\" % search_iteration\n","\n","    with tf.Session() as sess:\n","        sess.run(init)\n","\n","        for epoch in range(n_epochs):\n","            for batch_index in range(n_batches):\n","                X_batch, y_batch = random_batch(X_train_enhanced, y_train, batch_size)\n","                sess.run(training_op, feed_dict={X: X_batch, y: y_batch})\n","            loss_val, summary_str = sess.run([loss, loss_summary], feed_dict={X: X_test_enhanced, y: y_test})\n","            file_writer.add_summary(summary_str, epoch)\n","            if epoch % 500 == 0:\n","                print(\".\", end=\"\")\n","\n","        saver.save(sess, final_model_path)\n","\n","        print()\n","        y_proba_val = y_proba.eval(feed_dict={X: X_test_enhanced, y: y_test})\n","        y_pred = (y_proba_val >= 0.5)\n","        \n","        print(\"  precision:\", precision_score(y_test, y_pred))\n","        print(\"  recall:\", recall_score(y_test, y_pred))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"e-DDldeEPJbi","colab_type":"text"},"cell_type":"markdown","source":["The `reciprocal()` function from SciPy's `stats` module returns a random distribution that is commonly used when you have no idea of the optimal scale of a hyperparameter. See the exercise solutions for chapter 2 for more details. "]},{"metadata":{"id":"7w8RHnu7PJbi","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}